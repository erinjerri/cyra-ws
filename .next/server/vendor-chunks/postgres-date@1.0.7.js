"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/postgres-date@1.0.7";
exports.ids = ["vendor-chunks/postgres-date@1.0.7"];
exports.modules = {

/***/ "(rsc)/../../../../node_modules/.pnpm/postgres-date@1.0.7/node_modules/postgres-date/index.js":
/*!**********************************************************************************************!*\
  !*** ../../../../node_modules/.pnpm/postgres-date@1.0.7/node_modules/postgres-date/index.js ***!
  \**********************************************************************************************/
/***/ ((module) => {

eval("\n\nvar DATE_TIME = /(\\d{1,})-(\\d{2})-(\\d{2}) (\\d{2}):(\\d{2}):(\\d{2})(\\.\\d{1,})?.*?( BC)?$/\nvar DATE = /^(\\d{1,})-(\\d{2})-(\\d{2})( BC)?$/\nvar TIME_ZONE = /([Z+-])(\\d{2})?:?(\\d{2})?:?(\\d{2})?/\nvar INFINITY = /^-?infinity$/\n\nmodule.exports = function parseDate (isoDate) {\n  if (INFINITY.test(isoDate)) {\n    // Capitalize to Infinity before passing to Number\n    return Number(isoDate.replace('i', 'I'))\n  }\n  var matches = DATE_TIME.exec(isoDate)\n\n  if (!matches) {\n    // Force YYYY-MM-DD dates to be parsed as local time\n    return getDate(isoDate) || null\n  }\n\n  var isBC = !!matches[8]\n  var year = parseInt(matches[1], 10)\n  if (isBC) {\n    year = bcYearToNegativeYear(year)\n  }\n\n  var month = parseInt(matches[2], 10) - 1\n  var day = matches[3]\n  var hour = parseInt(matches[4], 10)\n  var minute = parseInt(matches[5], 10)\n  var second = parseInt(matches[6], 10)\n\n  var ms = matches[7]\n  ms = ms ? 1000 * parseFloat(ms) : 0\n\n  var date\n  var offset = timeZoneOffset(isoDate)\n  if (offset != null) {\n    date = new Date(Date.UTC(year, month, day, hour, minute, second, ms))\n\n    // Account for years from 0 to 99 being interpreted as 1900-1999\n    // by Date.UTC / the multi-argument form of the Date constructor\n    if (is0To99(year)) {\n      date.setUTCFullYear(year)\n    }\n\n    if (offset !== 0) {\n      date.setTime(date.getTime() - offset)\n    }\n  } else {\n    date = new Date(year, month, day, hour, minute, second, ms)\n\n    if (is0To99(year)) {\n      date.setFullYear(year)\n    }\n  }\n\n  return date\n}\n\nfunction getDate (isoDate) {\n  var matches = DATE.exec(isoDate)\n  if (!matches) {\n    return\n  }\n\n  var year = parseInt(matches[1], 10)\n  var isBC = !!matches[4]\n  if (isBC) {\n    year = bcYearToNegativeYear(year)\n  }\n\n  var month = parseInt(matches[2], 10) - 1\n  var day = matches[3]\n  // YYYY-MM-DD will be parsed as local time\n  var date = new Date(year, month, day)\n\n  if (is0To99(year)) {\n    date.setFullYear(year)\n  }\n\n  return date\n}\n\n// match timezones:\n// Z (UTC)\n// -05\n// +06:30\nfunction timeZoneOffset (isoDate) {\n  if (isoDate.endsWith('+00')) {\n    return 0\n  }\n\n  var zone = TIME_ZONE.exec(isoDate.split(' ')[1])\n  if (!zone) return\n  var type = zone[1]\n\n  if (type === 'Z') {\n    return 0\n  }\n  var sign = type === '-' ? -1 : 1\n  var offset = parseInt(zone[2], 10) * 3600 +\n    parseInt(zone[3] || 0, 10) * 60 +\n    parseInt(zone[4] || 0, 10)\n\n  return offset * sign * 1000\n}\n\nfunction bcYearToNegativeYear (year) {\n  // Account for numerical difference between representations of BC years\n  // See: https://github.com/bendrucker/postgres-date/issues/5\n  return -(year - 1)\n}\n\nfunction is0To99 (num) {\n  return num >= 0 && num < 100\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3Bvc3RncmVzLWRhdGVAMS4wLjcvbm9kZV9tb2R1bGVzL3Bvc3RncmVzLWRhdGUvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQVk7O0FBRVoscUJBQXFCLEdBQUcsTUFBTSxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxPQUFPLEdBQUc7QUFDMUUsaUJBQWlCLEdBQUcsTUFBTSxFQUFFLE1BQU0sRUFBRTtBQUNwQyw0QkFBNEIsRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFO0FBQ2xEOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBIiwic291cmNlcyI6WyIvVXNlcnMvZXJpbmplcnJpL25vZGVfbW9kdWxlcy8ucG5wbS9wb3N0Z3Jlcy1kYXRlQDEuMC43L25vZGVfbW9kdWxlcy9wb3N0Z3Jlcy1kYXRlL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG52YXIgREFURV9USU1FID0gLyhcXGR7MSx9KS0oXFxkezJ9KS0oXFxkezJ9KSAoXFxkezJ9KTooXFxkezJ9KTooXFxkezJ9KShcXC5cXGR7MSx9KT8uKj8oIEJDKT8kL1xudmFyIERBVEUgPSAvXihcXGR7MSx9KS0oXFxkezJ9KS0oXFxkezJ9KSggQkMpPyQvXG52YXIgVElNRV9aT05FID0gLyhbWistXSkoXFxkezJ9KT86PyhcXGR7Mn0pPzo/KFxcZHsyfSk/L1xudmFyIElORklOSVRZID0gL14tP2luZmluaXR5JC9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBwYXJzZURhdGUgKGlzb0RhdGUpIHtcbiAgaWYgKElORklOSVRZLnRlc3QoaXNvRGF0ZSkpIHtcbiAgICAvLyBDYXBpdGFsaXplIHRvIEluZmluaXR5IGJlZm9yZSBwYXNzaW5nIHRvIE51bWJlclxuICAgIHJldHVybiBOdW1iZXIoaXNvRGF0ZS5yZXBsYWNlKCdpJywgJ0knKSlcbiAgfVxuICB2YXIgbWF0Y2hlcyA9IERBVEVfVElNRS5leGVjKGlzb0RhdGUpXG5cbiAgaWYgKCFtYXRjaGVzKSB7XG4gICAgLy8gRm9yY2UgWVlZWS1NTS1ERCBkYXRlcyB0byBiZSBwYXJzZWQgYXMgbG9jYWwgdGltZVxuICAgIHJldHVybiBnZXREYXRlKGlzb0RhdGUpIHx8IG51bGxcbiAgfVxuXG4gIHZhciBpc0JDID0gISFtYXRjaGVzWzhdXG4gIHZhciB5ZWFyID0gcGFyc2VJbnQobWF0Y2hlc1sxXSwgMTApXG4gIGlmIChpc0JDKSB7XG4gICAgeWVhciA9IGJjWWVhclRvTmVnYXRpdmVZZWFyKHllYXIpXG4gIH1cblxuICB2YXIgbW9udGggPSBwYXJzZUludChtYXRjaGVzWzJdLCAxMCkgLSAxXG4gIHZhciBkYXkgPSBtYXRjaGVzWzNdXG4gIHZhciBob3VyID0gcGFyc2VJbnQobWF0Y2hlc1s0XSwgMTApXG4gIHZhciBtaW51dGUgPSBwYXJzZUludChtYXRjaGVzWzVdLCAxMClcbiAgdmFyIHNlY29uZCA9IHBhcnNlSW50KG1hdGNoZXNbNl0sIDEwKVxuXG4gIHZhciBtcyA9IG1hdGNoZXNbN11cbiAgbXMgPSBtcyA/IDEwMDAgKiBwYXJzZUZsb2F0KG1zKSA6IDBcblxuICB2YXIgZGF0ZVxuICB2YXIgb2Zmc2V0ID0gdGltZVpvbmVPZmZzZXQoaXNvRGF0ZSlcbiAgaWYgKG9mZnNldCAhPSBudWxsKSB7XG4gICAgZGF0ZSA9IG5ldyBEYXRlKERhdGUuVVRDKHllYXIsIG1vbnRoLCBkYXksIGhvdXIsIG1pbnV0ZSwgc2Vjb25kLCBtcykpXG5cbiAgICAvLyBBY2NvdW50IGZvciB5ZWFycyBmcm9tIDAgdG8gOTkgYmVpbmcgaW50ZXJwcmV0ZWQgYXMgMTkwMC0xOTk5XG4gICAgLy8gYnkgRGF0ZS5VVEMgLyB0aGUgbXVsdGktYXJndW1lbnQgZm9ybSBvZiB0aGUgRGF0ZSBjb25zdHJ1Y3RvclxuICAgIGlmIChpczBUbzk5KHllYXIpKSB7XG4gICAgICBkYXRlLnNldFVUQ0Z1bGxZZWFyKHllYXIpXG4gICAgfVxuXG4gICAgaWYgKG9mZnNldCAhPT0gMCkge1xuICAgICAgZGF0ZS5zZXRUaW1lKGRhdGUuZ2V0VGltZSgpIC0gb2Zmc2V0KVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBkYXRlID0gbmV3IERhdGUoeWVhciwgbW9udGgsIGRheSwgaG91ciwgbWludXRlLCBzZWNvbmQsIG1zKVxuXG4gICAgaWYgKGlzMFRvOTkoeWVhcikpIHtcbiAgICAgIGRhdGUuc2V0RnVsbFllYXIoeWVhcilcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZGF0ZVxufVxuXG5mdW5jdGlvbiBnZXREYXRlIChpc29EYXRlKSB7XG4gIHZhciBtYXRjaGVzID0gREFURS5leGVjKGlzb0RhdGUpXG4gIGlmICghbWF0Y2hlcykge1xuICAgIHJldHVyblxuICB9XG5cbiAgdmFyIHllYXIgPSBwYXJzZUludChtYXRjaGVzWzFdLCAxMClcbiAgdmFyIGlzQkMgPSAhIW1hdGNoZXNbNF1cbiAgaWYgKGlzQkMpIHtcbiAgICB5ZWFyID0gYmNZZWFyVG9OZWdhdGl2ZVllYXIoeWVhcilcbiAgfVxuXG4gIHZhciBtb250aCA9IHBhcnNlSW50KG1hdGNoZXNbMl0sIDEwKSAtIDFcbiAgdmFyIGRheSA9IG1hdGNoZXNbM11cbiAgLy8gWVlZWS1NTS1ERCB3aWxsIGJlIHBhcnNlZCBhcyBsb2NhbCB0aW1lXG4gIHZhciBkYXRlID0gbmV3IERhdGUoeWVhciwgbW9udGgsIGRheSlcblxuICBpZiAoaXMwVG85OSh5ZWFyKSkge1xuICAgIGRhdGUuc2V0RnVsbFllYXIoeWVhcilcbiAgfVxuXG4gIHJldHVybiBkYXRlXG59XG5cbi8vIG1hdGNoIHRpbWV6b25lczpcbi8vIFogKFVUQylcbi8vIC0wNVxuLy8gKzA2OjMwXG5mdW5jdGlvbiB0aW1lWm9uZU9mZnNldCAoaXNvRGF0ZSkge1xuICBpZiAoaXNvRGF0ZS5lbmRzV2l0aCgnKzAwJykpIHtcbiAgICByZXR1cm4gMFxuICB9XG5cbiAgdmFyIHpvbmUgPSBUSU1FX1pPTkUuZXhlYyhpc29EYXRlLnNwbGl0KCcgJylbMV0pXG4gIGlmICghem9uZSkgcmV0dXJuXG4gIHZhciB0eXBlID0gem9uZVsxXVxuXG4gIGlmICh0eXBlID09PSAnWicpIHtcbiAgICByZXR1cm4gMFxuICB9XG4gIHZhciBzaWduID0gdHlwZSA9PT0gJy0nID8gLTEgOiAxXG4gIHZhciBvZmZzZXQgPSBwYXJzZUludCh6b25lWzJdLCAxMCkgKiAzNjAwICtcbiAgICBwYXJzZUludCh6b25lWzNdIHx8IDAsIDEwKSAqIDYwICtcbiAgICBwYXJzZUludCh6b25lWzRdIHx8IDAsIDEwKVxuXG4gIHJldHVybiBvZmZzZXQgKiBzaWduICogMTAwMFxufVxuXG5mdW5jdGlvbiBiY1llYXJUb05lZ2F0aXZlWWVhciAoeWVhcikge1xuICAvLyBBY2NvdW50IGZvciBudW1lcmljYWwgZGlmZmVyZW5jZSBiZXR3ZWVuIHJlcHJlc2VudGF0aW9ucyBvZiBCQyB5ZWFyc1xuICAvLyBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9iZW5kcnVja2VyL3Bvc3RncmVzLWRhdGUvaXNzdWVzLzVcbiAgcmV0dXJuIC0oeWVhciAtIDEpXG59XG5cbmZ1bmN0aW9uIGlzMFRvOTkgKG51bSkge1xuICByZXR1cm4gbnVtID49IDAgJiYgbnVtIDwgMTAwXG59XG4iXSwibmFtZXMiOltdLCJpZ25vcmVMaXN0IjpbMF0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../../../../node_modules/.pnpm/postgres-date@1.0.7/node_modules/postgres-date/index.js\n");

/***/ })

};
;