"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@aws-sdk+middleware-bucket-endpoint@3.714.0";
exports.ids = ["vendor-chunks/@aws-sdk+middleware-bucket-endpoint@3.714.0"];
exports.modules = {

/***/ "(rsc)/../../../../node_modules/.pnpm/@aws-sdk+middleware-bucket-endpoint@3.714.0/node_modules/@aws-sdk/middleware-bucket-endpoint/dist-cjs/index.js":
/*!*****************************************************************************************************************************************************!*\
  !*** ../../../../node_modules/.pnpm/@aws-sdk+middleware-bucket-endpoint@3.714.0/node_modules/@aws-sdk/middleware-bucket-endpoint/dist-cjs/index.js ***!
  \*****************************************************************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __name = (target, value) => __defProp(target, \"name\", { value, configurable: true });\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\n\n// src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n  NODE_DISABLE_MULTIREGION_ACCESS_POINT_CONFIG_OPTIONS: () => NODE_DISABLE_MULTIREGION_ACCESS_POINT_CONFIG_OPTIONS,\n  NODE_DISABLE_MULTIREGION_ACCESS_POINT_ENV_NAME: () => NODE_DISABLE_MULTIREGION_ACCESS_POINT_ENV_NAME,\n  NODE_DISABLE_MULTIREGION_ACCESS_POINT_INI_NAME: () => NODE_DISABLE_MULTIREGION_ACCESS_POINT_INI_NAME,\n  NODE_USE_ARN_REGION_CONFIG_OPTIONS: () => NODE_USE_ARN_REGION_CONFIG_OPTIONS,\n  NODE_USE_ARN_REGION_ENV_NAME: () => NODE_USE_ARN_REGION_ENV_NAME,\n  NODE_USE_ARN_REGION_INI_NAME: () => NODE_USE_ARN_REGION_INI_NAME,\n  bucketEndpointMiddleware: () => bucketEndpointMiddleware,\n  bucketEndpointMiddlewareOptions: () => bucketEndpointMiddlewareOptions,\n  bucketHostname: () => bucketHostname,\n  getArnResources: () => getArnResources,\n  getBucketEndpointPlugin: () => getBucketEndpointPlugin,\n  getSuffixForArnEndpoint: () => getSuffixForArnEndpoint,\n  resolveBucketEndpointConfig: () => resolveBucketEndpointConfig,\n  validateAccountId: () => validateAccountId,\n  validateDNSHostLabel: () => validateDNSHostLabel,\n  validateNoDualstack: () => validateNoDualstack,\n  validateNoFIPS: () => validateNoFIPS,\n  validateOutpostService: () => validateOutpostService,\n  validatePartition: () => validatePartition,\n  validateRegion: () => validateRegion\n});\nmodule.exports = __toCommonJS(src_exports);\n\n// src/NodeDisableMultiregionAccessPointConfigOptions.ts\nvar import_util_config_provider = __webpack_require__(/*! @smithy/util-config-provider */ \"(rsc)/../../../../node_modules/.pnpm/@smithy+util-config-provider@3.0.0/node_modules/@smithy/util-config-provider/dist-es/index.js\");\nvar NODE_DISABLE_MULTIREGION_ACCESS_POINT_ENV_NAME = \"AWS_S3_DISABLE_MULTIREGION_ACCESS_POINTS\";\nvar NODE_DISABLE_MULTIREGION_ACCESS_POINT_INI_NAME = \"s3_disable_multiregion_access_points\";\nvar NODE_DISABLE_MULTIREGION_ACCESS_POINT_CONFIG_OPTIONS = {\n  environmentVariableSelector: (env) => (0, import_util_config_provider.booleanSelector)(env, NODE_DISABLE_MULTIREGION_ACCESS_POINT_ENV_NAME, import_util_config_provider.SelectorType.ENV),\n  configFileSelector: (profile) => (0, import_util_config_provider.booleanSelector)(profile, NODE_DISABLE_MULTIREGION_ACCESS_POINT_INI_NAME, import_util_config_provider.SelectorType.CONFIG),\n  default: false\n};\n\n// src/NodeUseArnRegionConfigOptions.ts\n\nvar NODE_USE_ARN_REGION_ENV_NAME = \"AWS_S3_USE_ARN_REGION\";\nvar NODE_USE_ARN_REGION_INI_NAME = \"s3_use_arn_region\";\nvar NODE_USE_ARN_REGION_CONFIG_OPTIONS = {\n  environmentVariableSelector: (env) => (0, import_util_config_provider.booleanSelector)(env, NODE_USE_ARN_REGION_ENV_NAME, import_util_config_provider.SelectorType.ENV),\n  configFileSelector: (profile) => (0, import_util_config_provider.booleanSelector)(profile, NODE_USE_ARN_REGION_INI_NAME, import_util_config_provider.SelectorType.CONFIG),\n  default: false\n};\n\n// src/bucketEndpointMiddleware.ts\nvar import_util_arn_parser = __webpack_require__(/*! @aws-sdk/util-arn-parser */ \"(rsc)/../../../../node_modules/.pnpm/@aws-sdk+util-arn-parser@3.693.0/node_modules/@aws-sdk/util-arn-parser/dist-es/index.js\");\nvar import_protocol_http = __webpack_require__(/*! @smithy/protocol-http */ \"(rsc)/../../../../node_modules/.pnpm/@smithy+protocol-http@4.1.8/node_modules/@smithy/protocol-http/dist-es/index.js\");\n\n// src/bucketHostnameUtils.ts\nvar DOMAIN_PATTERN = /^[a-z0-9][a-z0-9\\.\\-]{1,61}[a-z0-9]$/;\nvar IP_ADDRESS_PATTERN = /(\\d+\\.){3}\\d+/;\nvar DOTS_PATTERN = /\\.\\./;\nvar DOT_PATTERN = /\\./;\nvar S3_HOSTNAME_PATTERN = /^(.+\\.)?s3(-fips)?(\\.dualstack)?[.-]([a-z0-9-]+)\\./;\nvar S3_US_EAST_1_ALTNAME_PATTERN = /^s3(-external-1)?\\.amazonaws\\.com$/;\nvar AWS_PARTITION_SUFFIX = \"amazonaws.com\";\nvar isBucketNameOptions = /* @__PURE__ */ __name((options) => typeof options.bucketName === \"string\", \"isBucketNameOptions\");\nvar isDnsCompatibleBucketName = /* @__PURE__ */ __name((bucketName) => DOMAIN_PATTERN.test(bucketName) && !IP_ADDRESS_PATTERN.test(bucketName) && !DOTS_PATTERN.test(bucketName), \"isDnsCompatibleBucketName\");\nvar getRegionalSuffix = /* @__PURE__ */ __name((hostname) => {\n  const parts = hostname.match(S3_HOSTNAME_PATTERN);\n  return [parts[4], hostname.replace(new RegExp(`^${parts[0]}`), \"\")];\n}, \"getRegionalSuffix\");\nvar getSuffix = /* @__PURE__ */ __name((hostname) => S3_US_EAST_1_ALTNAME_PATTERN.test(hostname) ? [\"us-east-1\", AWS_PARTITION_SUFFIX] : getRegionalSuffix(hostname), \"getSuffix\");\nvar getSuffixForArnEndpoint = /* @__PURE__ */ __name((hostname) => S3_US_EAST_1_ALTNAME_PATTERN.test(hostname) ? [hostname.replace(`.${AWS_PARTITION_SUFFIX}`, \"\"), AWS_PARTITION_SUFFIX] : getRegionalSuffix(hostname), \"getSuffixForArnEndpoint\");\nvar validateArnEndpointOptions = /* @__PURE__ */ __name((options) => {\n  if (options.pathStyleEndpoint) {\n    throw new Error(\"Path-style S3 endpoint is not supported when bucket is an ARN\");\n  }\n  if (options.accelerateEndpoint) {\n    throw new Error(\"Accelerate endpoint is not supported when bucket is an ARN\");\n  }\n  if (!options.tlsCompatible) {\n    throw new Error(\"HTTPS is required when bucket is an ARN\");\n  }\n}, \"validateArnEndpointOptions\");\nvar validateService = /* @__PURE__ */ __name((service) => {\n  if (service !== \"s3\" && service !== \"s3-outposts\" && service !== \"s3-object-lambda\") {\n    throw new Error(\"Expect 's3' or 's3-outposts' or 's3-object-lambda' in ARN service component\");\n  }\n}, \"validateService\");\nvar validateS3Service = /* @__PURE__ */ __name((service) => {\n  if (service !== \"s3\") {\n    throw new Error(\"Expect 's3' in Accesspoint ARN service component\");\n  }\n}, \"validateS3Service\");\nvar validateOutpostService = /* @__PURE__ */ __name((service) => {\n  if (service !== \"s3-outposts\") {\n    throw new Error(\"Expect 's3-posts' in Outpost ARN service component\");\n  }\n}, \"validateOutpostService\");\nvar validatePartition = /* @__PURE__ */ __name((partition, options) => {\n  if (partition !== options.clientPartition) {\n    throw new Error(`Partition in ARN is incompatible, got \"${partition}\" but expected \"${options.clientPartition}\"`);\n  }\n}, \"validatePartition\");\nvar validateRegion = /* @__PURE__ */ __name((region, options) => {\n  if (region === \"\") {\n    throw new Error(\"ARN region is empty\");\n  }\n  if (options.useFipsEndpoint) {\n    if (!options.allowFipsRegion) {\n      throw new Error(\"FIPS region is not supported\");\n    } else if (!isEqualRegions(region, options.clientRegion)) {\n      throw new Error(`Client FIPS region ${options.clientRegion} doesn't match region ${region} in ARN`);\n    }\n  }\n  if (!options.useArnRegion && !isEqualRegions(region, options.clientRegion || \"\") && !isEqualRegions(region, options.clientSigningRegion || \"\")) {\n    throw new Error(`Region in ARN is incompatible, got ${region} but expected ${options.clientRegion}`);\n  }\n}, \"validateRegion\");\nvar validateRegionalClient = /* @__PURE__ */ __name((region) => {\n  if ([\"s3-external-1\", \"aws-global\"].includes(region)) {\n    throw new Error(`Client region ${region} is not regional`);\n  }\n}, \"validateRegionalClient\");\nvar isEqualRegions = /* @__PURE__ */ __name((regionA, regionB) => regionA === regionB, \"isEqualRegions\");\nvar validateAccountId = /* @__PURE__ */ __name((accountId) => {\n  if (!/[0-9]{12}/.exec(accountId)) {\n    throw new Error(\"Access point ARN accountID does not match regex '[0-9]{12}'\");\n  }\n}, \"validateAccountId\");\nvar validateDNSHostLabel = /* @__PURE__ */ __name((label, options = { tlsCompatible: true }) => {\n  if (label.length >= 64 || !/^[a-z0-9][a-z0-9.-]*[a-z0-9]$/.test(label) || /(\\d+\\.){3}\\d+/.test(label) || /[.-]{2}/.test(label) || (options == null ? void 0 : options.tlsCompatible) && DOT_PATTERN.test(label)) {\n    throw new Error(`Invalid DNS label ${label}`);\n  }\n}, \"validateDNSHostLabel\");\nvar validateCustomEndpoint = /* @__PURE__ */ __name((options) => {\n  if (options.isCustomEndpoint) {\n    if (options.dualstackEndpoint)\n      throw new Error(\"Dualstack endpoint is not supported with custom endpoint\");\n    if (options.accelerateEndpoint)\n      throw new Error(\"Accelerate endpoint is not supported with custom endpoint\");\n  }\n}, \"validateCustomEndpoint\");\nvar getArnResources = /* @__PURE__ */ __name((resource) => {\n  const delimiter = resource.includes(\":\") ? \":\" : \"/\";\n  const [resourceType, ...rest] = resource.split(delimiter);\n  if (resourceType === \"accesspoint\") {\n    if (rest.length !== 1 || rest[0] === \"\") {\n      throw new Error(`Access Point ARN should have one resource accesspoint${delimiter}{accesspointname}`);\n    }\n    return { accesspointName: rest[0] };\n  } else if (resourceType === \"outpost\") {\n    if (!rest[0] || rest[1] !== \"accesspoint\" || !rest[2] || rest.length !== 3) {\n      throw new Error(\n        `Outpost ARN should have resource outpost${delimiter}{outpostId}${delimiter}accesspoint${delimiter}{accesspointName}`\n      );\n    }\n    const [outpostId, _, accesspointName] = rest;\n    return { outpostId, accesspointName };\n  } else {\n    throw new Error(`ARN resource should begin with 'accesspoint${delimiter}' or 'outpost${delimiter}'`);\n  }\n}, \"getArnResources\");\nvar validateNoDualstack = /* @__PURE__ */ __name((dualstackEndpoint) => {\n  if (dualstackEndpoint)\n    throw new Error(\"Dualstack endpoint is not supported with Outpost or Multi-region Access Point ARN.\");\n}, \"validateNoDualstack\");\nvar validateNoFIPS = /* @__PURE__ */ __name((useFipsEndpoint) => {\n  if (useFipsEndpoint)\n    throw new Error(`FIPS region is not supported with Outpost.`);\n}, \"validateNoFIPS\");\nvar validateMrapAlias = /* @__PURE__ */ __name((name) => {\n  try {\n    name.split(\".\").forEach((label) => {\n      validateDNSHostLabel(label);\n    });\n  } catch (e) {\n    throw new Error(`\"${name}\" is not a DNS compatible name.`);\n  }\n}, \"validateMrapAlias\");\n\n// src/bucketHostname.ts\nvar bucketHostname = /* @__PURE__ */ __name((options) => {\n  validateCustomEndpoint(options);\n  return isBucketNameOptions(options) ? (\n    // Construct endpoint when bucketName is a string referring to a bucket name\n    getEndpointFromBucketName(options)\n  ) : (\n    // Construct endpoint when bucketName is an ARN referring to an S3 resource like Access Point\n    getEndpointFromArn(options)\n  );\n}, \"bucketHostname\");\nvar getEndpointFromBucketName = /* @__PURE__ */ __name(({\n  accelerateEndpoint = false,\n  clientRegion: region,\n  baseHostname,\n  bucketName,\n  dualstackEndpoint = false,\n  fipsEndpoint = false,\n  pathStyleEndpoint = false,\n  tlsCompatible = true,\n  isCustomEndpoint = false\n}) => {\n  const [clientRegion, hostnameSuffix] = isCustomEndpoint ? [region, baseHostname] : getSuffix(baseHostname);\n  if (pathStyleEndpoint || !isDnsCompatibleBucketName(bucketName) || tlsCompatible && DOT_PATTERN.test(bucketName)) {\n    return {\n      bucketEndpoint: false,\n      hostname: dualstackEndpoint ? `s3.dualstack.${clientRegion}.${hostnameSuffix}` : baseHostname\n    };\n  }\n  if (accelerateEndpoint) {\n    baseHostname = `s3-accelerate${dualstackEndpoint ? \".dualstack\" : \"\"}.${hostnameSuffix}`;\n  } else if (dualstackEndpoint) {\n    baseHostname = `s3.dualstack.${clientRegion}.${hostnameSuffix}`;\n  }\n  return {\n    bucketEndpoint: true,\n    hostname: `${bucketName}.${baseHostname}`\n  };\n}, \"getEndpointFromBucketName\");\nvar getEndpointFromArn = /* @__PURE__ */ __name((options) => {\n  const { isCustomEndpoint, baseHostname, clientRegion } = options;\n  const hostnameSuffix = isCustomEndpoint ? baseHostname : getSuffixForArnEndpoint(baseHostname)[1];\n  const {\n    pathStyleEndpoint,\n    accelerateEndpoint = false,\n    fipsEndpoint = false,\n    tlsCompatible = true,\n    bucketName,\n    clientPartition = \"aws\"\n  } = options;\n  validateArnEndpointOptions({ pathStyleEndpoint, accelerateEndpoint, tlsCompatible });\n  const { service, partition, accountId, region, resource } = bucketName;\n  validateService(service);\n  validatePartition(partition, { clientPartition });\n  validateAccountId(accountId);\n  const { accesspointName, outpostId } = getArnResources(resource);\n  if (service === \"s3-object-lambda\") {\n    return getEndpointFromObjectLambdaArn({ ...options, tlsCompatible, bucketName, accesspointName, hostnameSuffix });\n  }\n  if (region === \"\") {\n    return getEndpointFromMRAPArn({ ...options, clientRegion, mrapAlias: accesspointName, hostnameSuffix });\n  }\n  if (outpostId) {\n    return getEndpointFromOutpostArn({ ...options, clientRegion, outpostId, accesspointName, hostnameSuffix });\n  }\n  return getEndpointFromAccessPointArn({ ...options, clientRegion, accesspointName, hostnameSuffix });\n}, \"getEndpointFromArn\");\nvar getEndpointFromObjectLambdaArn = /* @__PURE__ */ __name(({\n  dualstackEndpoint = false,\n  fipsEndpoint = false,\n  tlsCompatible = true,\n  useArnRegion,\n  clientRegion,\n  clientSigningRegion = clientRegion,\n  accesspointName,\n  bucketName,\n  hostnameSuffix\n}) => {\n  const { accountId, region, service } = bucketName;\n  validateRegionalClient(clientRegion);\n  validateRegion(region, {\n    useArnRegion,\n    clientRegion,\n    clientSigningRegion,\n    allowFipsRegion: true,\n    useFipsEndpoint: fipsEndpoint\n  });\n  validateNoDualstack(dualstackEndpoint);\n  const DNSHostLabel = `${accesspointName}-${accountId}`;\n  validateDNSHostLabel(DNSHostLabel, { tlsCompatible });\n  const endpointRegion = useArnRegion ? region : clientRegion;\n  const signingRegion = useArnRegion ? region : clientSigningRegion;\n  return {\n    bucketEndpoint: true,\n    hostname: `${DNSHostLabel}.${service}${fipsEndpoint ? \"-fips\" : \"\"}.${endpointRegion}.${hostnameSuffix}`,\n    signingRegion,\n    signingService: service\n  };\n}, \"getEndpointFromObjectLambdaArn\");\nvar getEndpointFromMRAPArn = /* @__PURE__ */ __name(({\n  disableMultiregionAccessPoints,\n  dualstackEndpoint = false,\n  isCustomEndpoint,\n  mrapAlias,\n  hostnameSuffix\n}) => {\n  if (disableMultiregionAccessPoints === true) {\n    throw new Error(\"SDK is attempting to use a MRAP ARN. Please enable to feature.\");\n  }\n  validateMrapAlias(mrapAlias);\n  validateNoDualstack(dualstackEndpoint);\n  return {\n    bucketEndpoint: true,\n    hostname: `${mrapAlias}${isCustomEndpoint ? \"\" : `.accesspoint.s3-global`}.${hostnameSuffix}`,\n    signingRegion: \"*\"\n  };\n}, \"getEndpointFromMRAPArn\");\nvar getEndpointFromOutpostArn = /* @__PURE__ */ __name(({\n  useArnRegion,\n  clientRegion,\n  clientSigningRegion = clientRegion,\n  bucketName,\n  outpostId,\n  dualstackEndpoint = false,\n  fipsEndpoint = false,\n  tlsCompatible = true,\n  accesspointName,\n  isCustomEndpoint,\n  hostnameSuffix\n}) => {\n  validateRegionalClient(clientRegion);\n  validateRegion(bucketName.region, { useArnRegion, clientRegion, clientSigningRegion, useFipsEndpoint: fipsEndpoint });\n  const DNSHostLabel = `${accesspointName}-${bucketName.accountId}`;\n  validateDNSHostLabel(DNSHostLabel, { tlsCompatible });\n  const endpointRegion = useArnRegion ? bucketName.region : clientRegion;\n  const signingRegion = useArnRegion ? bucketName.region : clientSigningRegion;\n  validateOutpostService(bucketName.service);\n  validateDNSHostLabel(outpostId, { tlsCompatible });\n  validateNoDualstack(dualstackEndpoint);\n  validateNoFIPS(fipsEndpoint);\n  const hostnamePrefix = `${DNSHostLabel}.${outpostId}`;\n  return {\n    bucketEndpoint: true,\n    hostname: `${hostnamePrefix}${isCustomEndpoint ? \"\" : `.s3-outposts.${endpointRegion}`}.${hostnameSuffix}`,\n    signingRegion,\n    signingService: \"s3-outposts\"\n  };\n}, \"getEndpointFromOutpostArn\");\nvar getEndpointFromAccessPointArn = /* @__PURE__ */ __name(({\n  useArnRegion,\n  clientRegion,\n  clientSigningRegion = clientRegion,\n  bucketName,\n  dualstackEndpoint = false,\n  fipsEndpoint = false,\n  tlsCompatible = true,\n  accesspointName,\n  isCustomEndpoint,\n  hostnameSuffix\n}) => {\n  validateRegionalClient(clientRegion);\n  validateRegion(bucketName.region, {\n    useArnRegion,\n    clientRegion,\n    clientSigningRegion,\n    allowFipsRegion: true,\n    useFipsEndpoint: fipsEndpoint\n  });\n  const hostnamePrefix = `${accesspointName}-${bucketName.accountId}`;\n  validateDNSHostLabel(hostnamePrefix, { tlsCompatible });\n  const endpointRegion = useArnRegion ? bucketName.region : clientRegion;\n  const signingRegion = useArnRegion ? bucketName.region : clientSigningRegion;\n  validateS3Service(bucketName.service);\n  return {\n    bucketEndpoint: true,\n    hostname: `${hostnamePrefix}${isCustomEndpoint ? \"\" : `.s3-accesspoint${fipsEndpoint ? \"-fips\" : \"\"}${dualstackEndpoint ? \".dualstack\" : \"\"}.${endpointRegion}`}.${hostnameSuffix}`,\n    signingRegion\n  };\n}, \"getEndpointFromAccessPointArn\");\n\n// src/bucketEndpointMiddleware.ts\nvar bucketEndpointMiddleware = /* @__PURE__ */ __name((options) => (next, context) => async (args) => {\n  const { Bucket: bucketName } = args.input;\n  let replaceBucketInPath = options.bucketEndpoint;\n  const request = args.request;\n  if (import_protocol_http.HttpRequest.isInstance(request)) {\n    if (options.bucketEndpoint) {\n      request.hostname = bucketName;\n    } else if ((0, import_util_arn_parser.validate)(bucketName)) {\n      const bucketArn = (0, import_util_arn_parser.parse)(bucketName);\n      const clientRegion = await options.region();\n      const useDualstackEndpoint = await options.useDualstackEndpoint();\n      const useFipsEndpoint = await options.useFipsEndpoint();\n      const { partition, signingRegion = clientRegion } = await options.regionInfoProvider(clientRegion, { useDualstackEndpoint, useFipsEndpoint }) || {};\n      const useArnRegion = await options.useArnRegion();\n      const {\n        hostname,\n        bucketEndpoint,\n        signingRegion: modifiedSigningRegion,\n        signingService\n      } = bucketHostname({\n        bucketName: bucketArn,\n        baseHostname: request.hostname,\n        accelerateEndpoint: options.useAccelerateEndpoint,\n        dualstackEndpoint: useDualstackEndpoint,\n        fipsEndpoint: useFipsEndpoint,\n        pathStyleEndpoint: options.forcePathStyle,\n        tlsCompatible: request.protocol === \"https:\",\n        useArnRegion,\n        clientPartition: partition,\n        clientSigningRegion: signingRegion,\n        clientRegion,\n        isCustomEndpoint: options.isCustomEndpoint,\n        disableMultiregionAccessPoints: await options.disableMultiregionAccessPoints()\n      });\n      if (modifiedSigningRegion && modifiedSigningRegion !== signingRegion) {\n        context[\"signing_region\"] = modifiedSigningRegion;\n      }\n      if (signingService && signingService !== \"s3\") {\n        context[\"signing_service\"] = signingService;\n      }\n      request.hostname = hostname;\n      replaceBucketInPath = bucketEndpoint;\n    } else {\n      const clientRegion = await options.region();\n      const dualstackEndpoint = await options.useDualstackEndpoint();\n      const fipsEndpoint = await options.useFipsEndpoint();\n      const { hostname, bucketEndpoint } = bucketHostname({\n        bucketName,\n        clientRegion,\n        baseHostname: request.hostname,\n        accelerateEndpoint: options.useAccelerateEndpoint,\n        dualstackEndpoint,\n        fipsEndpoint,\n        pathStyleEndpoint: options.forcePathStyle,\n        tlsCompatible: request.protocol === \"https:\",\n        isCustomEndpoint: options.isCustomEndpoint\n      });\n      request.hostname = hostname;\n      replaceBucketInPath = bucketEndpoint;\n    }\n    if (replaceBucketInPath) {\n      request.path = request.path.replace(/^(\\/)?[^\\/]+/, \"\");\n      if (request.path === \"\") {\n        request.path = \"/\";\n      }\n    }\n  }\n  return next({ ...args, request });\n}, \"bucketEndpointMiddleware\");\nvar bucketEndpointMiddlewareOptions = {\n  tags: [\"BUCKET_ENDPOINT\"],\n  name: \"bucketEndpointMiddleware\",\n  relation: \"before\",\n  toMiddleware: \"hostHeaderMiddleware\",\n  override: true\n};\nvar getBucketEndpointPlugin = /* @__PURE__ */ __name((options) => ({\n  applyToStack: (clientStack) => {\n    clientStack.addRelativeTo(bucketEndpointMiddleware(options), bucketEndpointMiddlewareOptions);\n  }\n}), \"getBucketEndpointPlugin\");\n\n// src/configurations.ts\nfunction resolveBucketEndpointConfig(input) {\n  const {\n    bucketEndpoint = false,\n    forcePathStyle = false,\n    useAccelerateEndpoint = false,\n    useArnRegion = false,\n    disableMultiregionAccessPoints = false\n  } = input;\n  return {\n    ...input,\n    bucketEndpoint,\n    forcePathStyle,\n    useAccelerateEndpoint,\n    useArnRegion: typeof useArnRegion === \"function\" ? useArnRegion : () => Promise.resolve(useArnRegion),\n    disableMultiregionAccessPoints: typeof disableMultiregionAccessPoints === \"function\" ? disableMultiregionAccessPoints : () => Promise.resolve(disableMultiregionAccessPoints)\n  };\n}\n__name(resolveBucketEndpointConfig, \"resolveBucketEndpointConfig\");\n// Annotate the CommonJS export names for ESM import in node:\n\n0 && (0);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../../../node_modules/.pnpm/@aws-sdk+middleware-bucket-endpoint@3.714.0/node_modules/@aws-sdk/middleware-bucket-endpoint/dist-cjs/index.js\n");

/***/ })

};
;