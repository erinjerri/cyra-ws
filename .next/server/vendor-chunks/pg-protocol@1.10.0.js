"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/pg-protocol@1.10.0";
exports.ids = ["vendor-chunks/pg-protocol@1.10.0"];
exports.modules = {

/***/ "(rsc)/../../../../node_modules/.pnpm/pg-protocol@1.10.0/node_modules/pg-protocol/dist/buffer-reader.js":
/*!********************************************************************************************************!*\
  !*** ../../../../node_modules/.pnpm/pg-protocol@1.10.0/node_modules/pg-protocol/dist/buffer-reader.js ***!
  \********************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.BufferReader = void 0;\nconst emptyBuffer = Buffer.allocUnsafe(0);\nclass BufferReader {\n    constructor(offset = 0) {\n        this.offset = offset;\n        this.buffer = emptyBuffer;\n        // TODO(bmc): support non-utf8 encoding?\n        this.encoding = 'utf-8';\n    }\n    setBuffer(offset, buffer) {\n        this.offset = offset;\n        this.buffer = buffer;\n    }\n    int16() {\n        const result = this.buffer.readInt16BE(this.offset);\n        this.offset += 2;\n        return result;\n    }\n    byte() {\n        const result = this.buffer[this.offset];\n        this.offset++;\n        return result;\n    }\n    int32() {\n        const result = this.buffer.readInt32BE(this.offset);\n        this.offset += 4;\n        return result;\n    }\n    uint32() {\n        const result = this.buffer.readUInt32BE(this.offset);\n        this.offset += 4;\n        return result;\n    }\n    string(length) {\n        const result = this.buffer.toString(this.encoding, this.offset, this.offset + length);\n        this.offset += length;\n        return result;\n    }\n    cstring() {\n        const start = this.offset;\n        let end = start;\n        // eslint-disable-next-line no-empty\n        while (this.buffer[end++] !== 0) { }\n        this.offset = end;\n        return this.buffer.toString(this.encoding, start, end - 1);\n    }\n    bytes(length) {\n        const result = this.buffer.slice(this.offset, this.offset + length);\n        this.offset += length;\n        return result;\n    }\n}\nexports.BufferReader = BufferReader;\n//# sourceMappingURL=buffer-reader.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3BnLXByb3RvY29sQDEuMTAuMC9ub2RlX21vZHVsZXMvcGctcHJvdG9jb2wvZGlzdC9idWZmZXItcmVhZGVyLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELG9CQUFvQjtBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0I7QUFDcEIiLCJzb3VyY2VzIjpbIi9Vc2Vycy9lcmluamVycmkvbm9kZV9tb2R1bGVzLy5wbnBtL3BnLXByb3RvY29sQDEuMTAuMC9ub2RlX21vZHVsZXMvcGctcHJvdG9jb2wvZGlzdC9idWZmZXItcmVhZGVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5CdWZmZXJSZWFkZXIgPSB2b2lkIDA7XG5jb25zdCBlbXB0eUJ1ZmZlciA9IEJ1ZmZlci5hbGxvY1Vuc2FmZSgwKTtcbmNsYXNzIEJ1ZmZlclJlYWRlciB7XG4gICAgY29uc3RydWN0b3Iob2Zmc2V0ID0gMCkge1xuICAgICAgICB0aGlzLm9mZnNldCA9IG9mZnNldDtcbiAgICAgICAgdGhpcy5idWZmZXIgPSBlbXB0eUJ1ZmZlcjtcbiAgICAgICAgLy8gVE9ETyhibWMpOiBzdXBwb3J0IG5vbi11dGY4IGVuY29kaW5nP1xuICAgICAgICB0aGlzLmVuY29kaW5nID0gJ3V0Zi04JztcbiAgICB9XG4gICAgc2V0QnVmZmVyKG9mZnNldCwgYnVmZmVyKSB7XG4gICAgICAgIHRoaXMub2Zmc2V0ID0gb2Zmc2V0O1xuICAgICAgICB0aGlzLmJ1ZmZlciA9IGJ1ZmZlcjtcbiAgICB9XG4gICAgaW50MTYoKSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMuYnVmZmVyLnJlYWRJbnQxNkJFKHRoaXMub2Zmc2V0KTtcbiAgICAgICAgdGhpcy5vZmZzZXQgKz0gMjtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG4gICAgYnl0ZSgpIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gdGhpcy5idWZmZXJbdGhpcy5vZmZzZXRdO1xuICAgICAgICB0aGlzLm9mZnNldCsrO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICBpbnQzMigpIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gdGhpcy5idWZmZXIucmVhZEludDMyQkUodGhpcy5vZmZzZXQpO1xuICAgICAgICB0aGlzLm9mZnNldCArPSA0O1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICB1aW50MzIoKSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMuYnVmZmVyLnJlYWRVSW50MzJCRSh0aGlzLm9mZnNldCk7XG4gICAgICAgIHRoaXMub2Zmc2V0ICs9IDQ7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIHN0cmluZyhsZW5ndGgpIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gdGhpcy5idWZmZXIudG9TdHJpbmcodGhpcy5lbmNvZGluZywgdGhpcy5vZmZzZXQsIHRoaXMub2Zmc2V0ICsgbGVuZ3RoKTtcbiAgICAgICAgdGhpcy5vZmZzZXQgKz0gbGVuZ3RoO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgICBjc3RyaW5nKCkge1xuICAgICAgICBjb25zdCBzdGFydCA9IHRoaXMub2Zmc2V0O1xuICAgICAgICBsZXQgZW5kID0gc3RhcnQ7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1lbXB0eVxuICAgICAgICB3aGlsZSAodGhpcy5idWZmZXJbZW5kKytdICE9PSAwKSB7IH1cbiAgICAgICAgdGhpcy5vZmZzZXQgPSBlbmQ7XG4gICAgICAgIHJldHVybiB0aGlzLmJ1ZmZlci50b1N0cmluZyh0aGlzLmVuY29kaW5nLCBzdGFydCwgZW5kIC0gMSk7XG4gICAgfVxuICAgIGJ5dGVzKGxlbmd0aCkge1xuICAgICAgICBjb25zdCByZXN1bHQgPSB0aGlzLmJ1ZmZlci5zbGljZSh0aGlzLm9mZnNldCwgdGhpcy5vZmZzZXQgKyBsZW5ndGgpO1xuICAgICAgICB0aGlzLm9mZnNldCArPSBsZW5ndGg7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxufVxuZXhwb3J0cy5CdWZmZXJSZWFkZXIgPSBCdWZmZXJSZWFkZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1idWZmZXItcmVhZGVyLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../../../../node_modules/.pnpm/pg-protocol@1.10.0/node_modules/pg-protocol/dist/buffer-reader.js\n");

/***/ }),

/***/ "(rsc)/../../../../node_modules/.pnpm/pg-protocol@1.10.0/node_modules/pg-protocol/dist/buffer-writer.js":
/*!********************************************************************************************************!*\
  !*** ../../../../node_modules/.pnpm/pg-protocol@1.10.0/node_modules/pg-protocol/dist/buffer-writer.js ***!
  \********************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n//binary data writer tuned for encoding binary specific to the postgres binary protocol\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Writer = void 0;\nclass Writer {\n    constructor(size = 256) {\n        this.size = size;\n        this.offset = 5;\n        this.headerPosition = 0;\n        this.buffer = Buffer.allocUnsafe(size);\n    }\n    ensure(size) {\n        const remaining = this.buffer.length - this.offset;\n        if (remaining < size) {\n            const oldBuffer = this.buffer;\n            // exponential growth factor of around ~ 1.5\n            // https://stackoverflow.com/questions/2269063/buffer-growth-strategy\n            const newSize = oldBuffer.length + (oldBuffer.length >> 1) + size;\n            this.buffer = Buffer.allocUnsafe(newSize);\n            oldBuffer.copy(this.buffer);\n        }\n    }\n    addInt32(num) {\n        this.ensure(4);\n        this.buffer[this.offset++] = (num >>> 24) & 0xff;\n        this.buffer[this.offset++] = (num >>> 16) & 0xff;\n        this.buffer[this.offset++] = (num >>> 8) & 0xff;\n        this.buffer[this.offset++] = (num >>> 0) & 0xff;\n        return this;\n    }\n    addInt16(num) {\n        this.ensure(2);\n        this.buffer[this.offset++] = (num >>> 8) & 0xff;\n        this.buffer[this.offset++] = (num >>> 0) & 0xff;\n        return this;\n    }\n    addCString(string) {\n        if (!string) {\n            this.ensure(1);\n        }\n        else {\n            const len = Buffer.byteLength(string);\n            this.ensure(len + 1); // +1 for null terminator\n            this.buffer.write(string, this.offset, 'utf-8');\n            this.offset += len;\n        }\n        this.buffer[this.offset++] = 0; // null terminator\n        return this;\n    }\n    addString(string = '') {\n        const len = Buffer.byteLength(string);\n        this.ensure(len);\n        this.buffer.write(string, this.offset);\n        this.offset += len;\n        return this;\n    }\n    add(otherBuffer) {\n        this.ensure(otherBuffer.length);\n        otherBuffer.copy(this.buffer, this.offset);\n        this.offset += otherBuffer.length;\n        return this;\n    }\n    join(code) {\n        if (code) {\n            this.buffer[this.headerPosition] = code;\n            //length is everything in this packet minus the code\n            const length = this.offset - (this.headerPosition + 1);\n            this.buffer.writeInt32BE(length, this.headerPosition + 1);\n        }\n        return this.buffer.slice(code ? 0 : 5, this.offset);\n    }\n    flush(code) {\n        const result = this.join(code);\n        this.offset = 5;\n        this.headerPosition = 0;\n        this.buffer = Buffer.allocUnsafe(this.size);\n        return result;\n    }\n}\nexports.Writer = Writer;\n//# sourceMappingURL=buffer-writer.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3BnLXByb3RvY29sQDEuMTAuMC9ub2RlX21vZHVsZXMvcGctcHJvdG9jb2wvZGlzdC9idWZmZXItd3JpdGVyLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQ0FBa0M7QUFDbEM7QUFDQTtBQUNBO0FBQ0Esd0NBQXdDO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2QiLCJzb3VyY2VzIjpbIi9Vc2Vycy9lcmluamVycmkvbm9kZV9tb2R1bGVzLy5wbnBtL3BnLXByb3RvY29sQDEuMTAuMC9ub2RlX21vZHVsZXMvcGctcHJvdG9jb2wvZGlzdC9idWZmZXItd3JpdGVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLy9iaW5hcnkgZGF0YSB3cml0ZXIgdHVuZWQgZm9yIGVuY29kaW5nIGJpbmFyeSBzcGVjaWZpYyB0byB0aGUgcG9zdGdyZXMgYmluYXJ5IHByb3RvY29sXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLldyaXRlciA9IHZvaWQgMDtcbmNsYXNzIFdyaXRlciB7XG4gICAgY29uc3RydWN0b3Ioc2l6ZSA9IDI1Nikge1xuICAgICAgICB0aGlzLnNpemUgPSBzaXplO1xuICAgICAgICB0aGlzLm9mZnNldCA9IDU7XG4gICAgICAgIHRoaXMuaGVhZGVyUG9zaXRpb24gPSAwO1xuICAgICAgICB0aGlzLmJ1ZmZlciA9IEJ1ZmZlci5hbGxvY1Vuc2FmZShzaXplKTtcbiAgICB9XG4gICAgZW5zdXJlKHNpemUpIHtcbiAgICAgICAgY29uc3QgcmVtYWluaW5nID0gdGhpcy5idWZmZXIubGVuZ3RoIC0gdGhpcy5vZmZzZXQ7XG4gICAgICAgIGlmIChyZW1haW5pbmcgPCBzaXplKSB7XG4gICAgICAgICAgICBjb25zdCBvbGRCdWZmZXIgPSB0aGlzLmJ1ZmZlcjtcbiAgICAgICAgICAgIC8vIGV4cG9uZW50aWFsIGdyb3d0aCBmYWN0b3Igb2YgYXJvdW5kIH4gMS41XG4gICAgICAgICAgICAvLyBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8yMjY5MDYzL2J1ZmZlci1ncm93dGgtc3RyYXRlZ3lcbiAgICAgICAgICAgIGNvbnN0IG5ld1NpemUgPSBvbGRCdWZmZXIubGVuZ3RoICsgKG9sZEJ1ZmZlci5sZW5ndGggPj4gMSkgKyBzaXplO1xuICAgICAgICAgICAgdGhpcy5idWZmZXIgPSBCdWZmZXIuYWxsb2NVbnNhZmUobmV3U2l6ZSk7XG4gICAgICAgICAgICBvbGRCdWZmZXIuY29weSh0aGlzLmJ1ZmZlcik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgYWRkSW50MzIobnVtKSB7XG4gICAgICAgIHRoaXMuZW5zdXJlKDQpO1xuICAgICAgICB0aGlzLmJ1ZmZlclt0aGlzLm9mZnNldCsrXSA9IChudW0gPj4+IDI0KSAmIDB4ZmY7XG4gICAgICAgIHRoaXMuYnVmZmVyW3RoaXMub2Zmc2V0KytdID0gKG51bSA+Pj4gMTYpICYgMHhmZjtcbiAgICAgICAgdGhpcy5idWZmZXJbdGhpcy5vZmZzZXQrK10gPSAobnVtID4+PiA4KSAmIDB4ZmY7XG4gICAgICAgIHRoaXMuYnVmZmVyW3RoaXMub2Zmc2V0KytdID0gKG51bSA+Pj4gMCkgJiAweGZmO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgYWRkSW50MTYobnVtKSB7XG4gICAgICAgIHRoaXMuZW5zdXJlKDIpO1xuICAgICAgICB0aGlzLmJ1ZmZlclt0aGlzLm9mZnNldCsrXSA9IChudW0gPj4+IDgpICYgMHhmZjtcbiAgICAgICAgdGhpcy5idWZmZXJbdGhpcy5vZmZzZXQrK10gPSAobnVtID4+PiAwKSAmIDB4ZmY7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBhZGRDU3RyaW5nKHN0cmluZykge1xuICAgICAgICBpZiAoIXN0cmluZykge1xuICAgICAgICAgICAgdGhpcy5lbnN1cmUoMSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBsZW4gPSBCdWZmZXIuYnl0ZUxlbmd0aChzdHJpbmcpO1xuICAgICAgICAgICAgdGhpcy5lbnN1cmUobGVuICsgMSk7IC8vICsxIGZvciBudWxsIHRlcm1pbmF0b3JcbiAgICAgICAgICAgIHRoaXMuYnVmZmVyLndyaXRlKHN0cmluZywgdGhpcy5vZmZzZXQsICd1dGYtOCcpO1xuICAgICAgICAgICAgdGhpcy5vZmZzZXQgKz0gbGVuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuYnVmZmVyW3RoaXMub2Zmc2V0KytdID0gMDsgLy8gbnVsbCB0ZXJtaW5hdG9yXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBhZGRTdHJpbmcoc3RyaW5nID0gJycpIHtcbiAgICAgICAgY29uc3QgbGVuID0gQnVmZmVyLmJ5dGVMZW5ndGgoc3RyaW5nKTtcbiAgICAgICAgdGhpcy5lbnN1cmUobGVuKTtcbiAgICAgICAgdGhpcy5idWZmZXIud3JpdGUoc3RyaW5nLCB0aGlzLm9mZnNldCk7XG4gICAgICAgIHRoaXMub2Zmc2V0ICs9IGxlbjtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIGFkZChvdGhlckJ1ZmZlcikge1xuICAgICAgICB0aGlzLmVuc3VyZShvdGhlckJ1ZmZlci5sZW5ndGgpO1xuICAgICAgICBvdGhlckJ1ZmZlci5jb3B5KHRoaXMuYnVmZmVyLCB0aGlzLm9mZnNldCk7XG4gICAgICAgIHRoaXMub2Zmc2V0ICs9IG90aGVyQnVmZmVyLmxlbmd0aDtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIGpvaW4oY29kZSkge1xuICAgICAgICBpZiAoY29kZSkge1xuICAgICAgICAgICAgdGhpcy5idWZmZXJbdGhpcy5oZWFkZXJQb3NpdGlvbl0gPSBjb2RlO1xuICAgICAgICAgICAgLy9sZW5ndGggaXMgZXZlcnl0aGluZyBpbiB0aGlzIHBhY2tldCBtaW51cyB0aGUgY29kZVxuICAgICAgICAgICAgY29uc3QgbGVuZ3RoID0gdGhpcy5vZmZzZXQgLSAodGhpcy5oZWFkZXJQb3NpdGlvbiArIDEpO1xuICAgICAgICAgICAgdGhpcy5idWZmZXIud3JpdGVJbnQzMkJFKGxlbmd0aCwgdGhpcy5oZWFkZXJQb3NpdGlvbiArIDEpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmJ1ZmZlci5zbGljZShjb2RlID8gMCA6IDUsIHRoaXMub2Zmc2V0KTtcbiAgICB9XG4gICAgZmx1c2goY29kZSkge1xuICAgICAgICBjb25zdCByZXN1bHQgPSB0aGlzLmpvaW4oY29kZSk7XG4gICAgICAgIHRoaXMub2Zmc2V0ID0gNTtcbiAgICAgICAgdGhpcy5oZWFkZXJQb3NpdGlvbiA9IDA7XG4gICAgICAgIHRoaXMuYnVmZmVyID0gQnVmZmVyLmFsbG9jVW5zYWZlKHRoaXMuc2l6ZSk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxufVxuZXhwb3J0cy5Xcml0ZXIgPSBXcml0ZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1idWZmZXItd3JpdGVyLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../../../../node_modules/.pnpm/pg-protocol@1.10.0/node_modules/pg-protocol/dist/buffer-writer.js\n");

/***/ }),

/***/ "(rsc)/../../../../node_modules/.pnpm/pg-protocol@1.10.0/node_modules/pg-protocol/dist/index.js":
/*!************************************************************************************************!*\
  !*** ../../../../node_modules/.pnpm/pg-protocol@1.10.0/node_modules/pg-protocol/dist/index.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.DatabaseError = exports.serialize = exports.parse = void 0;\nconst messages_1 = __webpack_require__(/*! ./messages */ \"(rsc)/../../../../node_modules/.pnpm/pg-protocol@1.10.0/node_modules/pg-protocol/dist/messages.js\");\nObject.defineProperty(exports, \"DatabaseError\", ({ enumerable: true, get: function () { return messages_1.DatabaseError; } }));\nconst serializer_1 = __webpack_require__(/*! ./serializer */ \"(rsc)/../../../../node_modules/.pnpm/pg-protocol@1.10.0/node_modules/pg-protocol/dist/serializer.js\");\nObject.defineProperty(exports, \"serialize\", ({ enumerable: true, get: function () { return serializer_1.serialize; } }));\nconst parser_1 = __webpack_require__(/*! ./parser */ \"(rsc)/../../../../node_modules/.pnpm/pg-protocol@1.10.0/node_modules/pg-protocol/dist/parser.js\");\nfunction parse(stream, callback) {\n    const parser = new parser_1.Parser();\n    stream.on('data', (buffer) => parser.parse(buffer, callback));\n    return new Promise((resolve) => stream.on('end', () => resolve()));\n}\nexports.parse = parse;\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3BnLXByb3RvY29sQDEuMTAuMC9ub2RlX21vZHVsZXMvcGctcHJvdG9jb2wvZGlzdC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxxQkFBcUIsR0FBRyxpQkFBaUIsR0FBRyxhQUFhO0FBQ3pELG1CQUFtQixtQkFBTyxDQUFDLHFIQUFZO0FBQ3ZDLGlEQUFnRCxFQUFFLHFDQUFxQyxvQ0FBb0MsRUFBQztBQUM1SCxxQkFBcUIsbUJBQU8sQ0FBQyx5SEFBYztBQUMzQyw2Q0FBNEMsRUFBRSxxQ0FBcUMsa0NBQWtDLEVBQUM7QUFDdEgsaUJBQWlCLG1CQUFPLENBQUMsaUhBQVU7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYiIsInNvdXJjZXMiOlsiL1VzZXJzL2VyaW5qZXJyaS9ub2RlX21vZHVsZXMvLnBucG0vcGctcHJvdG9jb2xAMS4xMC4wL25vZGVfbW9kdWxlcy9wZy1wcm90b2NvbC9kaXN0L2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5EYXRhYmFzZUVycm9yID0gZXhwb3J0cy5zZXJpYWxpemUgPSBleHBvcnRzLnBhcnNlID0gdm9pZCAwO1xuY29uc3QgbWVzc2FnZXNfMSA9IHJlcXVpcmUoXCIuL21lc3NhZ2VzXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiRGF0YWJhc2VFcnJvclwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gbWVzc2FnZXNfMS5EYXRhYmFzZUVycm9yOyB9IH0pO1xuY29uc3Qgc2VyaWFsaXplcl8xID0gcmVxdWlyZShcIi4vc2VyaWFsaXplclwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInNlcmlhbGl6ZVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gc2VyaWFsaXplcl8xLnNlcmlhbGl6ZTsgfSB9KTtcbmNvbnN0IHBhcnNlcl8xID0gcmVxdWlyZShcIi4vcGFyc2VyXCIpO1xuZnVuY3Rpb24gcGFyc2Uoc3RyZWFtLCBjYWxsYmFjaykge1xuICAgIGNvbnN0IHBhcnNlciA9IG5ldyBwYXJzZXJfMS5QYXJzZXIoKTtcbiAgICBzdHJlYW0ub24oJ2RhdGEnLCAoYnVmZmVyKSA9PiBwYXJzZXIucGFyc2UoYnVmZmVyLCBjYWxsYmFjaykpO1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gc3RyZWFtLm9uKCdlbmQnLCAoKSA9PiByZXNvbHZlKCkpKTtcbn1cbmV4cG9ydHMucGFyc2UgPSBwYXJzZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../../../../node_modules/.pnpm/pg-protocol@1.10.0/node_modules/pg-protocol/dist/index.js\n");

/***/ }),

/***/ "(rsc)/../../../../node_modules/.pnpm/pg-protocol@1.10.0/node_modules/pg-protocol/dist/messages.js":
/*!***************************************************************************************************!*\
  !*** ../../../../node_modules/.pnpm/pg-protocol@1.10.0/node_modules/pg-protocol/dist/messages.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.NoticeMessage = exports.DataRowMessage = exports.CommandCompleteMessage = exports.ReadyForQueryMessage = exports.NotificationResponseMessage = exports.BackendKeyDataMessage = exports.AuthenticationMD5Password = exports.ParameterStatusMessage = exports.ParameterDescriptionMessage = exports.RowDescriptionMessage = exports.Field = exports.CopyResponse = exports.CopyDataMessage = exports.DatabaseError = exports.copyDone = exports.emptyQuery = exports.replicationStart = exports.portalSuspended = exports.noData = exports.closeComplete = exports.bindComplete = exports.parseComplete = void 0;\nexports.parseComplete = {\n    name: 'parseComplete',\n    length: 5,\n};\nexports.bindComplete = {\n    name: 'bindComplete',\n    length: 5,\n};\nexports.closeComplete = {\n    name: 'closeComplete',\n    length: 5,\n};\nexports.noData = {\n    name: 'noData',\n    length: 5,\n};\nexports.portalSuspended = {\n    name: 'portalSuspended',\n    length: 5,\n};\nexports.replicationStart = {\n    name: 'replicationStart',\n    length: 4,\n};\nexports.emptyQuery = {\n    name: 'emptyQuery',\n    length: 4,\n};\nexports.copyDone = {\n    name: 'copyDone',\n    length: 4,\n};\nclass DatabaseError extends Error {\n    constructor(message, length, name) {\n        super(message);\n        this.length = length;\n        this.name = name;\n    }\n}\nexports.DatabaseError = DatabaseError;\nclass CopyDataMessage {\n    constructor(length, chunk) {\n        this.length = length;\n        this.chunk = chunk;\n        this.name = 'copyData';\n    }\n}\nexports.CopyDataMessage = CopyDataMessage;\nclass CopyResponse {\n    constructor(length, name, binary, columnCount) {\n        this.length = length;\n        this.name = name;\n        this.binary = binary;\n        this.columnTypes = new Array(columnCount);\n    }\n}\nexports.CopyResponse = CopyResponse;\nclass Field {\n    constructor(name, tableID, columnID, dataTypeID, dataTypeSize, dataTypeModifier, format) {\n        this.name = name;\n        this.tableID = tableID;\n        this.columnID = columnID;\n        this.dataTypeID = dataTypeID;\n        this.dataTypeSize = dataTypeSize;\n        this.dataTypeModifier = dataTypeModifier;\n        this.format = format;\n    }\n}\nexports.Field = Field;\nclass RowDescriptionMessage {\n    constructor(length, fieldCount) {\n        this.length = length;\n        this.fieldCount = fieldCount;\n        this.name = 'rowDescription';\n        this.fields = new Array(this.fieldCount);\n    }\n}\nexports.RowDescriptionMessage = RowDescriptionMessage;\nclass ParameterDescriptionMessage {\n    constructor(length, parameterCount) {\n        this.length = length;\n        this.parameterCount = parameterCount;\n        this.name = 'parameterDescription';\n        this.dataTypeIDs = new Array(this.parameterCount);\n    }\n}\nexports.ParameterDescriptionMessage = ParameterDescriptionMessage;\nclass ParameterStatusMessage {\n    constructor(length, parameterName, parameterValue) {\n        this.length = length;\n        this.parameterName = parameterName;\n        this.parameterValue = parameterValue;\n        this.name = 'parameterStatus';\n    }\n}\nexports.ParameterStatusMessage = ParameterStatusMessage;\nclass AuthenticationMD5Password {\n    constructor(length, salt) {\n        this.length = length;\n        this.salt = salt;\n        this.name = 'authenticationMD5Password';\n    }\n}\nexports.AuthenticationMD5Password = AuthenticationMD5Password;\nclass BackendKeyDataMessage {\n    constructor(length, processID, secretKey) {\n        this.length = length;\n        this.processID = processID;\n        this.secretKey = secretKey;\n        this.name = 'backendKeyData';\n    }\n}\nexports.BackendKeyDataMessage = BackendKeyDataMessage;\nclass NotificationResponseMessage {\n    constructor(length, processId, channel, payload) {\n        this.length = length;\n        this.processId = processId;\n        this.channel = channel;\n        this.payload = payload;\n        this.name = 'notification';\n    }\n}\nexports.NotificationResponseMessage = NotificationResponseMessage;\nclass ReadyForQueryMessage {\n    constructor(length, status) {\n        this.length = length;\n        this.status = status;\n        this.name = 'readyForQuery';\n    }\n}\nexports.ReadyForQueryMessage = ReadyForQueryMessage;\nclass CommandCompleteMessage {\n    constructor(length, text) {\n        this.length = length;\n        this.text = text;\n        this.name = 'commandComplete';\n    }\n}\nexports.CommandCompleteMessage = CommandCompleteMessage;\nclass DataRowMessage {\n    constructor(length, fields) {\n        this.length = length;\n        this.fields = fields;\n        this.name = 'dataRow';\n        this.fieldCount = fields.length;\n    }\n}\nexports.DataRowMessage = DataRowMessage;\nclass NoticeMessage {\n    constructor(length, message) {\n        this.length = length;\n        this.message = message;\n        this.name = 'notice';\n    }\n}\nexports.NoticeMessage = NoticeMessage;\n//# sourceMappingURL=messages.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL3BnLXByb3RvY29sQDEuMTAuMC9ub2RlX21vZHVsZXMvcGctcHJvdG9jb2wvZGlzdC9tZXNzYWdlcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxxQkFBcUIsR0FBRyxzQkFBc0IsR0FBRyw4QkFBOEIsR0FBRyw0QkFBNEIsR0FBRyxtQ0FBbUMsR0FBRyw2QkFBNkIsR0FBRyxpQ0FBaUMsR0FBRyw4QkFBOEIsR0FBRyxtQ0FBbUMsR0FBRyw2QkFBNkIsR0FBRyxhQUFhLEdBQUcsb0JBQW9CLEdBQUcsdUJBQXVCLEdBQUcscUJBQXFCLEdBQUcsZ0JBQWdCLEdBQUcsa0JBQWtCLEdBQUcsd0JBQXdCLEdBQUcsdUJBQXVCLEdBQUcsY0FBYyxHQUFHLHFCQUFxQixHQUFHLG9CQUFvQixHQUFHLHFCQUFxQjtBQUM3a0IscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQjtBQUNwQjtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QjtBQUNBO0FBQ0E7QUFDQSx3QkFBd0I7QUFDeEI7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QjtBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUNBQW1DO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEI7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUM7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QjtBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQ0FBbUM7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEI7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEI7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQjtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQiIsInNvdXJjZXMiOlsiL1VzZXJzL2VyaW5qZXJyaS9ub2RlX21vZHVsZXMvLnBucG0vcGctcHJvdG9jb2xAMS4xMC4wL25vZGVfbW9kdWxlcy9wZy1wcm90b2NvbC9kaXN0L21lc3NhZ2VzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Ob3RpY2VNZXNzYWdlID0gZXhwb3J0cy5EYXRhUm93TWVzc2FnZSA9IGV4cG9ydHMuQ29tbWFuZENvbXBsZXRlTWVzc2FnZSA9IGV4cG9ydHMuUmVhZHlGb3JRdWVyeU1lc3NhZ2UgPSBleHBvcnRzLk5vdGlmaWNhdGlvblJlc3BvbnNlTWVzc2FnZSA9IGV4cG9ydHMuQmFja2VuZEtleURhdGFNZXNzYWdlID0gZXhwb3J0cy5BdXRoZW50aWNhdGlvbk1ENVBhc3N3b3JkID0gZXhwb3J0cy5QYXJhbWV0ZXJTdGF0dXNNZXNzYWdlID0gZXhwb3J0cy5QYXJhbWV0ZXJEZXNjcmlwdGlvbk1lc3NhZ2UgPSBleHBvcnRzLlJvd0Rlc2NyaXB0aW9uTWVzc2FnZSA9IGV4cG9ydHMuRmllbGQgPSBleHBvcnRzLkNvcHlSZXNwb25zZSA9IGV4cG9ydHMuQ29weURhdGFNZXNzYWdlID0gZXhwb3J0cy5EYXRhYmFzZUVycm9yID0gZXhwb3J0cy5jb3B5RG9uZSA9IGV4cG9ydHMuZW1wdHlRdWVyeSA9IGV4cG9ydHMucmVwbGljYXRpb25TdGFydCA9IGV4cG9ydHMucG9ydGFsU3VzcGVuZGVkID0gZXhwb3J0cy5ub0RhdGEgPSBleHBvcnRzLmNsb3NlQ29tcGxldGUgPSBleHBvcnRzLmJpbmRDb21wbGV0ZSA9IGV4cG9ydHMucGFyc2VDb21wbGV0ZSA9IHZvaWQgMDtcbmV4cG9ydHMucGFyc2VDb21wbGV0ZSA9IHtcbiAgICBuYW1lOiAncGFyc2VDb21wbGV0ZScsXG4gICAgbGVuZ3RoOiA1LFxufTtcbmV4cG9ydHMuYmluZENvbXBsZXRlID0ge1xuICAgIG5hbWU6ICdiaW5kQ29tcGxldGUnLFxuICAgIGxlbmd0aDogNSxcbn07XG5leHBvcnRzLmNsb3NlQ29tcGxldGUgPSB7XG4gICAgbmFtZTogJ2Nsb3NlQ29tcGxldGUnLFxuICAgIGxlbmd0aDogNSxcbn07XG5leHBvcnRzLm5vRGF0YSA9IHtcbiAgICBuYW1lOiAnbm9EYXRhJyxcbiAgICBsZW5ndGg6IDUsXG59O1xuZXhwb3J0cy5wb3J0YWxTdXNwZW5kZWQgPSB7XG4gICAgbmFtZTogJ3BvcnRhbFN1c3BlbmRlZCcsXG4gICAgbGVuZ3RoOiA1LFxufTtcbmV4cG9ydHMucmVwbGljYXRpb25TdGFydCA9IHtcbiAgICBuYW1lOiAncmVwbGljYXRpb25TdGFydCcsXG4gICAgbGVuZ3RoOiA0LFxufTtcbmV4cG9ydHMuZW1wdHlRdWVyeSA9IHtcbiAgICBuYW1lOiAnZW1wdHlRdWVyeScsXG4gICAgbGVuZ3RoOiA0LFxufTtcbmV4cG9ydHMuY29weURvbmUgPSB7XG4gICAgbmFtZTogJ2NvcHlEb25lJyxcbiAgICBsZW5ndGg6IDQsXG59O1xuY2xhc3MgRGF0YWJhc2VFcnJvciBleHRlbmRzIEVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcihtZXNzYWdlLCBsZW5ndGgsIG5hbWUpIHtcbiAgICAgICAgc3VwZXIobWVzc2FnZSk7XG4gICAgICAgIHRoaXMubGVuZ3RoID0gbGVuZ3RoO1xuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgIH1cbn1cbmV4cG9ydHMuRGF0YWJhc2VFcnJvciA9IERhdGFiYXNlRXJyb3I7XG5jbGFzcyBDb3B5RGF0YU1lc3NhZ2Uge1xuICAgIGNvbnN0cnVjdG9yKGxlbmd0aCwgY2h1bmspIHtcbiAgICAgICAgdGhpcy5sZW5ndGggPSBsZW5ndGg7XG4gICAgICAgIHRoaXMuY2h1bmsgPSBjaHVuaztcbiAgICAgICAgdGhpcy5uYW1lID0gJ2NvcHlEYXRhJztcbiAgICB9XG59XG5leHBvcnRzLkNvcHlEYXRhTWVzc2FnZSA9IENvcHlEYXRhTWVzc2FnZTtcbmNsYXNzIENvcHlSZXNwb25zZSB7XG4gICAgY29uc3RydWN0b3IobGVuZ3RoLCBuYW1lLCBiaW5hcnksIGNvbHVtbkNvdW50KSB7XG4gICAgICAgIHRoaXMubGVuZ3RoID0gbGVuZ3RoO1xuICAgICAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgICAgICB0aGlzLmJpbmFyeSA9IGJpbmFyeTtcbiAgICAgICAgdGhpcy5jb2x1bW5UeXBlcyA9IG5ldyBBcnJheShjb2x1bW5Db3VudCk7XG4gICAgfVxufVxuZXhwb3J0cy5Db3B5UmVzcG9uc2UgPSBDb3B5UmVzcG9uc2U7XG5jbGFzcyBGaWVsZCB7XG4gICAgY29uc3RydWN0b3IobmFtZSwgdGFibGVJRCwgY29sdW1uSUQsIGRhdGFUeXBlSUQsIGRhdGFUeXBlU2l6ZSwgZGF0YVR5cGVNb2RpZmllciwgZm9ybWF0KSB7XG4gICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgICAgIHRoaXMudGFibGVJRCA9IHRhYmxlSUQ7XG4gICAgICAgIHRoaXMuY29sdW1uSUQgPSBjb2x1bW5JRDtcbiAgICAgICAgdGhpcy5kYXRhVHlwZUlEID0gZGF0YVR5cGVJRDtcbiAgICAgICAgdGhpcy5kYXRhVHlwZVNpemUgPSBkYXRhVHlwZVNpemU7XG4gICAgICAgIHRoaXMuZGF0YVR5cGVNb2RpZmllciA9IGRhdGFUeXBlTW9kaWZpZXI7XG4gICAgICAgIHRoaXMuZm9ybWF0ID0gZm9ybWF0O1xuICAgIH1cbn1cbmV4cG9ydHMuRmllbGQgPSBGaWVsZDtcbmNsYXNzIFJvd0Rlc2NyaXB0aW9uTWVzc2FnZSB7XG4gICAgY29uc3RydWN0b3IobGVuZ3RoLCBmaWVsZENvdW50KSB7XG4gICAgICAgIHRoaXMubGVuZ3RoID0gbGVuZ3RoO1xuICAgICAgICB0aGlzLmZpZWxkQ291bnQgPSBmaWVsZENvdW50O1xuICAgICAgICB0aGlzLm5hbWUgPSAncm93RGVzY3JpcHRpb24nO1xuICAgICAgICB0aGlzLmZpZWxkcyA9IG5ldyBBcnJheSh0aGlzLmZpZWxkQ291bnQpO1xuICAgIH1cbn1cbmV4cG9ydHMuUm93RGVzY3JpcHRpb25NZXNzYWdlID0gUm93RGVzY3JpcHRpb25NZXNzYWdlO1xuY2xhc3MgUGFyYW1ldGVyRGVzY3JpcHRpb25NZXNzYWdlIHtcbiAgICBjb25zdHJ1Y3RvcihsZW5ndGgsIHBhcmFtZXRlckNvdW50KSB7XG4gICAgICAgIHRoaXMubGVuZ3RoID0gbGVuZ3RoO1xuICAgICAgICB0aGlzLnBhcmFtZXRlckNvdW50ID0gcGFyYW1ldGVyQ291bnQ7XG4gICAgICAgIHRoaXMubmFtZSA9ICdwYXJhbWV0ZXJEZXNjcmlwdGlvbic7XG4gICAgICAgIHRoaXMuZGF0YVR5cGVJRHMgPSBuZXcgQXJyYXkodGhpcy5wYXJhbWV0ZXJDb3VudCk7XG4gICAgfVxufVxuZXhwb3J0cy5QYXJhbWV0ZXJEZXNjcmlwdGlvbk1lc3NhZ2UgPSBQYXJhbWV0ZXJEZXNjcmlwdGlvbk1lc3NhZ2U7XG5jbGFzcyBQYXJhbWV0ZXJTdGF0dXNNZXNzYWdlIHtcbiAgICBjb25zdHJ1Y3RvcihsZW5ndGgsIHBhcmFtZXRlck5hbWUsIHBhcmFtZXRlclZhbHVlKSB7XG4gICAgICAgIHRoaXMubGVuZ3RoID0gbGVuZ3RoO1xuICAgICAgICB0aGlzLnBhcmFtZXRlck5hbWUgPSBwYXJhbWV0ZXJOYW1lO1xuICAgICAgICB0aGlzLnBhcmFtZXRlclZhbHVlID0gcGFyYW1ldGVyVmFsdWU7XG4gICAgICAgIHRoaXMubmFtZSA9ICdwYXJhbWV0ZXJTdGF0dXMnO1xuICAgIH1cbn1cbmV4cG9ydHMuUGFyYW1ldGVyU3RhdHVzTWVzc2FnZSA9IFBhcmFtZXRlclN0YXR1c01lc3NhZ2U7XG5jbGFzcyBBdXRoZW50aWNhdGlvbk1ENVBhc3N3b3JkIHtcbiAgICBjb25zdHJ1Y3RvcihsZW5ndGgsIHNhbHQpIHtcbiAgICAgICAgdGhpcy5sZW5ndGggPSBsZW5ndGg7XG4gICAgICAgIHRoaXMuc2FsdCA9IHNhbHQ7XG4gICAgICAgIHRoaXMubmFtZSA9ICdhdXRoZW50aWNhdGlvbk1ENVBhc3N3b3JkJztcbiAgICB9XG59XG5leHBvcnRzLkF1dGhlbnRpY2F0aW9uTUQ1UGFzc3dvcmQgPSBBdXRoZW50aWNhdGlvbk1ENVBhc3N3b3JkO1xuY2xhc3MgQmFja2VuZEtleURhdGFNZXNzYWdlIHtcbiAgICBjb25zdHJ1Y3RvcihsZW5ndGgsIHByb2Nlc3NJRCwgc2VjcmV0S2V5KSB7XG4gICAgICAgIHRoaXMubGVuZ3RoID0gbGVuZ3RoO1xuICAgICAgICB0aGlzLnByb2Nlc3NJRCA9IHByb2Nlc3NJRDtcbiAgICAgICAgdGhpcy5zZWNyZXRLZXkgPSBzZWNyZXRLZXk7XG4gICAgICAgIHRoaXMubmFtZSA9ICdiYWNrZW5kS2V5RGF0YSc7XG4gICAgfVxufVxuZXhwb3J0cy5CYWNrZW5kS2V5RGF0YU1lc3NhZ2UgPSBCYWNrZW5kS2V5RGF0YU1lc3NhZ2U7XG5jbGFzcyBOb3RpZmljYXRpb25SZXNwb25zZU1lc3NhZ2Uge1xuICAgIGNvbnN0cnVjdG9yKGxlbmd0aCwgcHJvY2Vzc0lkLCBjaGFubmVsLCBwYXlsb2FkKSB7XG4gICAgICAgIHRoaXMubGVuZ3RoID0gbGVuZ3RoO1xuICAgICAgICB0aGlzLnByb2Nlc3NJZCA9IHByb2Nlc3NJZDtcbiAgICAgICAgdGhpcy5jaGFubmVsID0gY2hhbm5lbDtcbiAgICAgICAgdGhpcy5wYXlsb2FkID0gcGF5bG9hZDtcbiAgICAgICAgdGhpcy5uYW1lID0gJ25vdGlmaWNhdGlvbic7XG4gICAgfVxufVxuZXhwb3J0cy5Ob3RpZmljYXRpb25SZXNwb25zZU1lc3NhZ2UgPSBOb3RpZmljYXRpb25SZXNwb25zZU1lc3NhZ2U7XG5jbGFzcyBSZWFkeUZvclF1ZXJ5TWVzc2FnZSB7XG4gICAgY29uc3RydWN0b3IobGVuZ3RoLCBzdGF0dXMpIHtcbiAgICAgICAgdGhpcy5sZW5ndGggPSBsZW5ndGg7XG4gICAgICAgIHRoaXMuc3RhdHVzID0gc3RhdHVzO1xuICAgICAgICB0aGlzLm5hbWUgPSAncmVhZHlGb3JRdWVyeSc7XG4gICAgfVxufVxuZXhwb3J0cy5SZWFkeUZvclF1ZXJ5TWVzc2FnZSA9IFJlYWR5Rm9yUXVlcnlNZXNzYWdlO1xuY2xhc3MgQ29tbWFuZENvbXBsZXRlTWVzc2FnZSB7XG4gICAgY29uc3RydWN0b3IobGVuZ3RoLCB0ZXh0KSB7XG4gICAgICAgIHRoaXMubGVuZ3RoID0gbGVuZ3RoO1xuICAgICAgICB0aGlzLnRleHQgPSB0ZXh0O1xuICAgICAgICB0aGlzLm5hbWUgPSAnY29tbWFuZENvbXBsZXRlJztcbiAgICB9XG59XG5leHBvcnRzLkNvbW1hbmRDb21wbGV0ZU1lc3NhZ2UgPSBDb21tYW5kQ29tcGxldGVNZXNzYWdlO1xuY2xhc3MgRGF0YVJvd01lc3NhZ2Uge1xuICAgIGNvbnN0cnVjdG9yKGxlbmd0aCwgZmllbGRzKSB7XG4gICAgICAgIHRoaXMubGVuZ3RoID0gbGVuZ3RoO1xuICAgICAgICB0aGlzLmZpZWxkcyA9IGZpZWxkcztcbiAgICAgICAgdGhpcy5uYW1lID0gJ2RhdGFSb3cnO1xuICAgICAgICB0aGlzLmZpZWxkQ291bnQgPSBmaWVsZHMubGVuZ3RoO1xuICAgIH1cbn1cbmV4cG9ydHMuRGF0YVJvd01lc3NhZ2UgPSBEYXRhUm93TWVzc2FnZTtcbmNsYXNzIE5vdGljZU1lc3NhZ2Uge1xuICAgIGNvbnN0cnVjdG9yKGxlbmd0aCwgbWVzc2FnZSkge1xuICAgICAgICB0aGlzLmxlbmd0aCA9IGxlbmd0aDtcbiAgICAgICAgdGhpcy5tZXNzYWdlID0gbWVzc2FnZTtcbiAgICAgICAgdGhpcy5uYW1lID0gJ25vdGljZSc7XG4gICAgfVxufVxuZXhwb3J0cy5Ob3RpY2VNZXNzYWdlID0gTm90aWNlTWVzc2FnZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1lc3NhZ2VzLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/../../../../node_modules/.pnpm/pg-protocol@1.10.0/node_modules/pg-protocol/dist/messages.js\n");

/***/ }),

/***/ "(rsc)/../../../../node_modules/.pnpm/pg-protocol@1.10.0/node_modules/pg-protocol/dist/parser.js":
/*!*************************************************************************************************!*\
  !*** ../../../../node_modules/.pnpm/pg-protocol@1.10.0/node_modules/pg-protocol/dist/parser.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Parser = void 0;\nconst messages_1 = __webpack_require__(/*! ./messages */ \"(rsc)/../../../../node_modules/.pnpm/pg-protocol@1.10.0/node_modules/pg-protocol/dist/messages.js\");\nconst buffer_reader_1 = __webpack_require__(/*! ./buffer-reader */ \"(rsc)/../../../../node_modules/.pnpm/pg-protocol@1.10.0/node_modules/pg-protocol/dist/buffer-reader.js\");\n// every message is prefixed with a single bye\nconst CODE_LENGTH = 1;\n// every message has an int32 length which includes itself but does\n// NOT include the code in the length\nconst LEN_LENGTH = 4;\nconst HEADER_LENGTH = CODE_LENGTH + LEN_LENGTH;\nconst emptyBuffer = Buffer.allocUnsafe(0);\nclass Parser {\n    constructor(opts) {\n        this.buffer = emptyBuffer;\n        this.bufferLength = 0;\n        this.bufferOffset = 0;\n        this.reader = new buffer_reader_1.BufferReader();\n        if ((opts === null || opts === void 0 ? void 0 : opts.mode) === 'binary') {\n            throw new Error('Binary mode not supported yet');\n        }\n        this.mode = (opts === null || opts === void 0 ? void 0 : opts.mode) || 'text';\n    }\n    parse(buffer, callback) {\n        this.mergeBuffer(buffer);\n        const bufferFullLength = this.bufferOffset + this.bufferLength;\n        let offset = this.bufferOffset;\n        while (offset + HEADER_LENGTH <= bufferFullLength) {\n            // code is 1 byte long - it identifies the message type\n            const code = this.buffer[offset];\n            // length is 1 Uint32BE - it is the length of the message EXCLUDING the code\n            const length = this.buffer.readUInt32BE(offset + CODE_LENGTH);\n            const fullMessageLength = CODE_LENGTH + length;\n            if (fullMessageLength + offset <= bufferFullLength) {\n                const message = this.handlePacket(offset + HEADER_LENGTH, code, length, this.buffer);\n                callback(message);\n                offset += fullMessageLength;\n            }\n            else {\n                break;\n            }\n        }\n        if (offset === bufferFullLength) {\n            // No more use for the buffer\n            this.buffer = emptyBuffer;\n            this.bufferLength = 0;\n            this.bufferOffset = 0;\n        }\n        else {\n            // Adjust the cursors of remainingBuffer\n            this.bufferLength = bufferFullLength - offset;\n            this.bufferOffset = offset;\n        }\n    }\n    mergeBuffer(buffer) {\n        if (this.bufferLength > 0) {\n            const newLength = this.bufferLength + buffer.byteLength;\n            const newFullLength = newLength + this.bufferOffset;\n            if (newFullLength > this.buffer.byteLength) {\n                // We can't concat the new buffer with the remaining one\n                let newBuffer;\n                if (newLength <= this.buffer.byteLength && this.bufferOffset >= this.bufferLength) {\n                    // We can move the relevant part to the beginning of the buffer instead of allocating a new buffer\n                    newBuffer = this.buffer;\n                }\n                else {\n                    // Allocate a new larger buffer\n                    let newBufferLength = this.buffer.byteLength * 2;\n                    while (newLength >= newBufferLength) {\n                        newBufferLength *= 2;\n                    }\n                    newBuffer = Buffer.allocUnsafe(newBufferLength);\n                }\n                // Move the remaining buffer to the new one\n                this.buffer.copy(newBuffer, 0, this.bufferOffset, this.bufferOffset + this.bufferLength);\n                this.buffer = newBuffer;\n                this.bufferOffset = 0;\n            }\n            // Concat the new buffer with the remaining one\n            buffer.copy(this.buffer, this.bufferOffset + this.bufferLength);\n            this.bufferLength = newLength;\n        }\n        else {\n            this.buffer = buffer;\n            this.bufferOffset = 0;\n            this.bufferLength = buffer.byteLength;\n        }\n    }\n    handlePacket(offset, code, length, bytes) {\n        switch (code) {\n            case 50 /* MessageCodes.BindComplete */:\n                return messages_1.bindComplete;\n            case 49 /* MessageCodes.ParseComplete */:\n                return messages_1.parseComplete;\n            case 51 /* MessageCodes.CloseComplete */:\n                return messages_1.closeComplete;\n            case 110 /* MessageCodes.NoData */:\n                return messages_1.noData;\n            case 115 /* MessageCodes.PortalSuspended */:\n                return messages_1.portalSuspended;\n            case 99 /* MessageCodes.CopyDone */:\n                return messages_1.copyDone;\n            case 87 /* MessageCodes.ReplicationStart */:\n                return messages_1.replicationStart;\n            case 73 /* MessageCodes.EmptyQuery */:\n                return messages_1.emptyQuery;\n            case 68 /* MessageCodes.DataRow */:\n                return this.parseDataRowMessage(offset, length, bytes);\n            case 67 /* MessageCodes.CommandComplete */:\n                return this.parseCommandCompleteMessage(offset, length, bytes);\n            case 90 /* MessageCodes.ReadyForQuery */:\n                return this.parseReadyForQueryMessage(offset, length, bytes);\n            case 65 /* MessageCodes.NotificationResponse */:\n                return this.parseNotificationMessage(offset, length, bytes);\n            case 82 /* MessageCodes.AuthenticationResponse */:\n                return this.parseAuthenticationResponse(offset, length, bytes);\n            case 83 /* MessageCodes.ParameterStatus */:\n                return this.parseParameterStatusMessage(offset, length, bytes);\n            case 75 /* MessageCodes.BackendKeyData */:\n                return this.parseBackendKeyData(offset, length, bytes);\n            case 69 /* MessageCodes.ErrorMessage */:\n                return this.parseErrorMessage(offset, length, bytes, 'error');\n            case 78 /* MessageCodes.NoticeMessage */:\n                return this.parseErrorMessage(offset, length, bytes, 'notice');\n            case 84 /* MessageCodes.RowDescriptionMessage */:\n                return this.parseRowDescriptionMessage(offset, length, bytes);\n            case 116 /* MessageCodes.ParameterDescriptionMessage */:\n                return this.parseParameterDescriptionMessage(offset, length, bytes);\n            case 71 /* MessageCodes.CopyIn */:\n                return this.parseCopyInMessage(offset, length, bytes);\n            case 72 /* MessageCodes.CopyOut */:\n                return this.parseCopyOutMessage(offset, length, bytes);\n            case 100 /* MessageCodes.CopyData */:\n                return this.parseCopyData(offset, length, bytes);\n            default:\n                return new messages_1.DatabaseError('received invalid response: ' + code.toString(16), length, 'error');\n        }\n    }\n    parseReadyForQueryMessage(offset, length, bytes) {\n        this.reader.setBuffer(offset, bytes);\n        const status = this.reader.string(1);\n        return new messages_1.ReadyForQueryMessage(length, status);\n    }\n    parseCommandCompleteMessage(offset, length, bytes) {\n        this.reader.setBuffer(offset, bytes);\n        const text = this.reader.cstring();\n        return new messages_1.CommandCompleteMessage(length, text);\n    }\n    parseCopyData(offset, length, bytes) {\n        const chunk = bytes.slice(offset, offset + (length - 4));\n        return new messages_1.CopyDataMessage(length, chunk);\n    }\n    parseCopyInMessage(offset, length, bytes) {\n        return this.parseCopyMessage(offset, length, bytes, 'copyInResponse');\n    }\n    parseCopyOutMessage(offset, length, bytes) {\n        return this.parseCopyMessage(offset, length, bytes, 'copyOutResponse');\n    }\n    parseCopyMessage(offset, length, bytes, messageName) {\n        this.reader.setBuffer(offset, bytes);\n        const isBinary = this.reader.byte() !== 0;\n        const columnCount = this.reader.int16();\n        const message = new messages_1.CopyResponse(length, messageName, isBinary, columnCount);\n        for (let i = 0; i < columnCount; i++) {\n            message.columnTypes[i] = this.reader.int16();\n        }\n        return message;\n    }\n    parseNotificationMessage(offset, length, bytes) {\n        this.reader.setBuffer(offset, bytes);\n        const processId = this.reader.int32();\n        const channel = this.reader.cstring();\n        const payload = this.reader.cstring();\n        return new messages_1.NotificationResponseMessage(length, processId, channel, payload);\n    }\n    parseRowDescriptionMessage(offset, length, bytes) {\n        this.reader.setBuffer(offset, bytes);\n        const fieldCount = this.reader.int16();\n        const message = new messages_1.RowDescriptionMessage(length, fieldCount);\n        for (let i = 0; i < fieldCount; i++) {\n            message.fields[i] = this.parseField();\n        }\n        return message;\n    }\n    parseField() {\n        const name = this.reader.cstring();\n        const tableID = this.reader.uint32();\n        const columnID = this.reader.int16();\n        const dataTypeID = this.reader.uint32();\n        const dataTypeSize = this.reader.int16();\n        const dataTypeModifier = this.reader.int32();\n        const mode = this.reader.int16() === 0 ? 'text' : 'binary';\n        return new messages_1.Field(name, tableID, columnID, dataTypeID, dataTypeSize, dataTypeModifier, mode);\n    }\n    parseParameterDescriptionMessage(offset, length, bytes) {\n        this.reader.setBuffer(offset, bytes);\n        const parameterCount = this.reader.int16();\n        const message = new messages_1.ParameterDescriptionMessage(length, parameterCount);\n        for (let i = 0; i < parameterCount; i++) {\n            message.dataTypeIDs[i] = this.reader.int32();\n        }\n        return message;\n    }\n    parseDataRowMessage(offset, length, bytes) {\n        this.reader.setBuffer(offset, bytes);\n        const fieldCount = this.reader.int16();\n        const fields = new Array(fieldCount);\n        for (let i = 0; i < fieldCount; i++) {\n            const len = this.reader.int32();\n            // a -1 for length means the value of the field is null\n            fields[i] = len === -1 ? null : this.reader.string(len);\n        }\n        return new messages_1.DataRowMessage(length, fields);\n    }\n    parseParameterStatusMessage(offset, length, bytes) {\n        this.reader.setBuffer(offset, bytes);\n        const name = this.reader.cstring();\n        const value = this.reader.cstring();\n        return new messages_1.ParameterStatusMessage(length, name, value);\n    }\n    parseBackendKeyData(offset, length, bytes) {\n        this.reader.setBuffer(offset, bytes);\n        const processID = this.reader.int32();\n        const secretKey = this.reader.int32();\n        return new messages_1.BackendKeyDataMessage(length, processID, secretKey);\n    }\n    parseAuthenticationResponse(offset, length, bytes) {\n        this.reader.setBuffer(offset, bytes);\n        const code = this.reader.int32();\n        // TODO(bmc): maybe better types here\n        const message = {\n            name: 'authenticationOk',\n            length,\n        };\n        switch (code) {\n            case 0: // AuthenticationOk\n                break;\n            case 3: // AuthenticationCleartextPassword\n                if (message.length === 8) {\n                    message.name = 'authenticationCleartextPassword';\n                }\n                break;\n            case 5: // AuthenticationMD5Password\n                if (message.length === 12) {\n                    message.name = 'authenticationMD5Password';\n                    const salt = this.reader.bytes(4);\n                    return new messages_1.AuthenticationMD5Password(length, salt);\n                }\n                break;\n            case 10: // AuthenticationSASL\n                {\n                    message.name = 'authenticationSASL';\n                    message.mechanisms = [];\n                    let mechanism;\n                    do {\n                        mechanism = this.reader.cstring();\n                        if (mechanism) {\n                            message.mechanisms.push(mechanism);\n                        }\n                    } while (mechanism);\n                }\n                break;\n            case 11: // AuthenticationSASLContinue\n                message.name = 'authenticationSASLContinue';\n                message.data = this.reader.string(length - 8);\n                break;\n            case 12: // AuthenticationSASLFinal\n                message.name = 'authenticationSASLFinal';\n                message.data = this.reader.string(length - 8);\n                break;\n            default:\n                throw new Error('Unknown authenticationOk message type ' + code);\n        }\n        return message;\n    }\n    parseErrorMessage(offset, length, bytes, name) {\n        this.reader.setBuffer(offset, bytes);\n        const fields = {};\n        let fieldType = this.reader.string(1);\n        while (fieldType !== '\\0') {\n            fields[fieldType] = this.reader.cstring();\n            fieldType = this.reader.string(1);\n        }\n        const messageValue = fields.M;\n        const message = name === 'notice' ? new messages_1.NoticeMessage(length, messageValue) : new messages_1.DatabaseError(messageValue, length, name);\n        message.severity = fields.S;\n        message.code = fields.C;\n        message.detail = fields.D;\n        message.hint = fields.H;\n        message.position = fields.P;\n        message.internalPosition = fields.p;\n        message.internalQuery = fields.q;\n        message.where = fields.W;\n        message.schema = fields.s;\n        message.table = fields.t;\n        message.column = fields.c;\n        message.dataType = fields.d;\n        message.constraint = fields.n;\n        message.file = fields.F;\n        message.line = fields.L;\n        message.routine = fields.R;\n        return message;\n    }\n}\nexports.Parser = Parser;\n//# sourceMappingURL=parser.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../../../node_modules/.pnpm/pg-protocol@1.10.0/node_modules/pg-protocol/dist/parser.js\n");

/***/ }),

/***/ "(rsc)/../../../../node_modules/.pnpm/pg-protocol@1.10.0/node_modules/pg-protocol/dist/serializer.js":
/*!*****************************************************************************************************!*\
  !*** ../../../../node_modules/.pnpm/pg-protocol@1.10.0/node_modules/pg-protocol/dist/serializer.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.serialize = void 0;\nconst buffer_writer_1 = __webpack_require__(/*! ./buffer-writer */ \"(rsc)/../../../../node_modules/.pnpm/pg-protocol@1.10.0/node_modules/pg-protocol/dist/buffer-writer.js\");\nconst writer = new buffer_writer_1.Writer();\nconst startup = (opts) => {\n    // protocol version\n    writer.addInt16(3).addInt16(0);\n    for (const key of Object.keys(opts)) {\n        writer.addCString(key).addCString(opts[key]);\n    }\n    writer.addCString('client_encoding').addCString('UTF8');\n    const bodyBuffer = writer.addCString('').flush();\n    // this message is sent without a code\n    const length = bodyBuffer.length + 4;\n    return new buffer_writer_1.Writer().addInt32(length).add(bodyBuffer).flush();\n};\nconst requestSsl = () => {\n    const response = Buffer.allocUnsafe(8);\n    response.writeInt32BE(8, 0);\n    response.writeInt32BE(80877103, 4);\n    return response;\n};\nconst password = (password) => {\n    return writer.addCString(password).flush(112 /* code.startup */);\n};\nconst sendSASLInitialResponseMessage = function (mechanism, initialResponse) {\n    // 0x70 = 'p'\n    writer.addCString(mechanism).addInt32(Buffer.byteLength(initialResponse)).addString(initialResponse);\n    return writer.flush(112 /* code.startup */);\n};\nconst sendSCRAMClientFinalMessage = function (additionalData) {\n    return writer.addString(additionalData).flush(112 /* code.startup */);\n};\nconst query = (text) => {\n    return writer.addCString(text).flush(81 /* code.query */);\n};\nconst emptyArray = [];\nconst parse = (query) => {\n    // expect something like this:\n    // { name: 'queryName',\n    //   text: 'select * from blah',\n    //   types: ['int8', 'bool'] }\n    // normalize missing query names to allow for null\n    const name = query.name || '';\n    if (name.length > 63) {\n        console.error('Warning! Postgres only supports 63 characters for query names.');\n        console.error('You supplied %s (%s)', name, name.length);\n        console.error('This can cause conflicts and silent errors executing queries');\n    }\n    const types = query.types || emptyArray;\n    const len = types.length;\n    const buffer = writer\n        .addCString(name) // name of query\n        .addCString(query.text) // actual query text\n        .addInt16(len);\n    for (let i = 0; i < len; i++) {\n        buffer.addInt32(types[i]);\n    }\n    return writer.flush(80 /* code.parse */);\n};\nconst paramWriter = new buffer_writer_1.Writer();\nconst writeValues = function (values, valueMapper) {\n    for (let i = 0; i < values.length; i++) {\n        const mappedVal = valueMapper ? valueMapper(values[i], i) : values[i];\n        if (mappedVal == null) {\n            // add the param type (string) to the writer\n            writer.addInt16(0 /* ParamType.STRING */);\n            // write -1 to the param writer to indicate null\n            paramWriter.addInt32(-1);\n        }\n        else if (mappedVal instanceof Buffer) {\n            // add the param type (binary) to the writer\n            writer.addInt16(1 /* ParamType.BINARY */);\n            // add the buffer to the param writer\n            paramWriter.addInt32(mappedVal.length);\n            paramWriter.add(mappedVal);\n        }\n        else {\n            // add the param type (string) to the writer\n            writer.addInt16(0 /* ParamType.STRING */);\n            paramWriter.addInt32(Buffer.byteLength(mappedVal));\n            paramWriter.addString(mappedVal);\n        }\n    }\n};\nconst bind = (config = {}) => {\n    // normalize config\n    const portal = config.portal || '';\n    const statement = config.statement || '';\n    const binary = config.binary || false;\n    const values = config.values || emptyArray;\n    const len = values.length;\n    writer.addCString(portal).addCString(statement);\n    writer.addInt16(len);\n    writeValues(values, config.valueMapper);\n    writer.addInt16(len);\n    writer.add(paramWriter.flush());\n    // format code\n    writer.addInt16(binary ? 1 /* ParamType.BINARY */ : 0 /* ParamType.STRING */);\n    return writer.flush(66 /* code.bind */);\n};\nconst emptyExecute = Buffer.from([69 /* code.execute */, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00]);\nconst execute = (config) => {\n    // this is the happy path for most queries\n    if (!config || (!config.portal && !config.rows)) {\n        return emptyExecute;\n    }\n    const portal = config.portal || '';\n    const rows = config.rows || 0;\n    const portalLength = Buffer.byteLength(portal);\n    const len = 4 + portalLength + 1 + 4;\n    // one extra bit for code\n    const buff = Buffer.allocUnsafe(1 + len);\n    buff[0] = 69 /* code.execute */;\n    buff.writeInt32BE(len, 1);\n    buff.write(portal, 5, 'utf-8');\n    buff[portalLength + 5] = 0; // null terminate portal cString\n    buff.writeUInt32BE(rows, buff.length - 4);\n    return buff;\n};\nconst cancel = (processID, secretKey) => {\n    const buffer = Buffer.allocUnsafe(16);\n    buffer.writeInt32BE(16, 0);\n    buffer.writeInt16BE(1234, 4);\n    buffer.writeInt16BE(5678, 6);\n    buffer.writeInt32BE(processID, 8);\n    buffer.writeInt32BE(secretKey, 12);\n    return buffer;\n};\nconst cstringMessage = (code, string) => {\n    const stringLen = Buffer.byteLength(string);\n    const len = 4 + stringLen + 1;\n    // one extra bit for code\n    const buffer = Buffer.allocUnsafe(1 + len);\n    buffer[0] = code;\n    buffer.writeInt32BE(len, 1);\n    buffer.write(string, 5, 'utf-8');\n    buffer[len] = 0; // null terminate cString\n    return buffer;\n};\nconst emptyDescribePortal = writer.addCString('P').flush(68 /* code.describe */);\nconst emptyDescribeStatement = writer.addCString('S').flush(68 /* code.describe */);\nconst describe = (msg) => {\n    return msg.name\n        ? cstringMessage(68 /* code.describe */, `${msg.type}${msg.name || ''}`)\n        : msg.type === 'P'\n            ? emptyDescribePortal\n            : emptyDescribeStatement;\n};\nconst close = (msg) => {\n    const text = `${msg.type}${msg.name || ''}`;\n    return cstringMessage(67 /* code.close */, text);\n};\nconst copyData = (chunk) => {\n    return writer.add(chunk).flush(100 /* code.copyFromChunk */);\n};\nconst copyFail = (message) => {\n    return cstringMessage(102 /* code.copyFail */, message);\n};\nconst codeOnlyBuffer = (code) => Buffer.from([code, 0x00, 0x00, 0x00, 0x04]);\nconst flushBuffer = codeOnlyBuffer(72 /* code.flush */);\nconst syncBuffer = codeOnlyBuffer(83 /* code.sync */);\nconst endBuffer = codeOnlyBuffer(88 /* code.end */);\nconst copyDoneBuffer = codeOnlyBuffer(99 /* code.copyDone */);\nconst serialize = {\n    startup,\n    password,\n    requestSsl,\n    sendSASLInitialResponseMessage,\n    sendSCRAMClientFinalMessage,\n    query,\n    parse,\n    bind,\n    execute,\n    describe,\n    close,\n    flush: () => flushBuffer,\n    sync: () => syncBuffer,\n    end: () => endBuffer,\n    copyData,\n    copyDone: () => copyDoneBuffer,\n    copyFail,\n    cancel,\n};\nexports.serialize = serialize;\n//# sourceMappingURL=serializer.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../../../node_modules/.pnpm/pg-protocol@1.10.0/node_modules/pg-protocol/dist/serializer.js\n");

/***/ })

};
;