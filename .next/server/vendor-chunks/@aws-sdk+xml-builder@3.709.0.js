"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@aws-sdk+xml-builder@3.709.0";
exports.ids = ["vendor-chunks/@aws-sdk+xml-builder@3.709.0"];
exports.modules = {

/***/ "(rsc)/../../../../node_modules/.pnpm/@aws-sdk+xml-builder@3.709.0/node_modules/@aws-sdk/xml-builder/dist-cjs/index.js":
/*!***********************************************************************************************************************!*\
  !*** ../../../../node_modules/.pnpm/@aws-sdk+xml-builder@3.709.0/node_modules/@aws-sdk/xml-builder/dist-cjs/index.js ***!
  \***********************************************************************************************************************/
/***/ ((module) => {

eval("\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __name = (target, value) => __defProp(target, \"name\", { value, configurable: true });\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\n\n// src/index.ts\nvar src_exports = {};\n__export(src_exports, {\n  XmlNode: () => XmlNode,\n  XmlText: () => XmlText\n});\nmodule.exports = __toCommonJS(src_exports);\n\n// src/escape-attribute.ts\nfunction escapeAttribute(value) {\n  return value.replace(/&/g, \"&amp;\").replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\").replace(/\"/g, \"&quot;\");\n}\n__name(escapeAttribute, \"escapeAttribute\");\n\n// src/escape-element.ts\nfunction escapeElement(value) {\n  return value.replace(/&/g, \"&amp;\").replace(/\"/g, \"&quot;\").replace(/'/g, \"&apos;\").replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\").replace(/\\r/g, \"&#x0D;\").replace(/\\n/g, \"&#x0A;\").replace(/\\u0085/g, \"&#x85;\").replace(/\\u2028/, \"&#x2028;\");\n}\n__name(escapeElement, \"escapeElement\");\n\n// src/XmlText.ts\nvar _XmlText = class _XmlText {\n  constructor(value) {\n    this.value = value;\n  }\n  toString() {\n    return escapeElement(\"\" + this.value);\n  }\n};\n__name(_XmlText, \"XmlText\");\nvar XmlText = _XmlText;\n\n// src/XmlNode.ts\nvar _XmlNode = class _XmlNode {\n  constructor(name, children = []) {\n    this.name = name;\n    this.children = children;\n    this.attributes = {};\n  }\n  static of(name, childText, withName) {\n    const node = new _XmlNode(name);\n    if (childText !== void 0) {\n      node.addChildNode(new XmlText(childText));\n    }\n    if (withName !== void 0) {\n      node.withName(withName);\n    }\n    return node;\n  }\n  withName(name) {\n    this.name = name;\n    return this;\n  }\n  addAttribute(name, value) {\n    this.attributes[name] = value;\n    return this;\n  }\n  addChildNode(child) {\n    this.children.push(child);\n    return this;\n  }\n  removeAttribute(name) {\n    delete this.attributes[name];\n    return this;\n  }\n  /**\n   * @internal\n   * Alias of {@link XmlNode#withName(string)} for codegen brevity.\n   */\n  n(name) {\n    this.name = name;\n    return this;\n  }\n  /**\n   * @internal\n   * Alias of {@link XmlNode#addChildNode(string)} for codegen brevity.\n   */\n  c(child) {\n    this.children.push(child);\n    return this;\n  }\n  /**\n   * @internal\n   * Checked version of {@link XmlNode#addAttribute(string)} for codegen brevity.\n   */\n  a(name, value) {\n    if (value != null) {\n      this.attributes[name] = value;\n    }\n    return this;\n  }\n  /**\n   * Create a child node.\n   * Used in serialization of string fields.\n   * @internal\n   */\n  cc(input, field, withName = field) {\n    if (input[field] != null) {\n      const node = _XmlNode.of(field, input[field]).withName(withName);\n      this.c(node);\n    }\n  }\n  /**\n   * Creates list child nodes.\n   * @internal\n   */\n  l(input, listName, memberName, valueProvider) {\n    if (input[listName] != null) {\n      const nodes = valueProvider();\n      nodes.map((node) => {\n        node.withName(memberName);\n        this.c(node);\n      });\n    }\n  }\n  /**\n   * Creates list child nodes with container.\n   * @internal\n   */\n  lc(input, listName, memberName, valueProvider) {\n    if (input[listName] != null) {\n      const nodes = valueProvider();\n      const containerNode = new _XmlNode(memberName);\n      nodes.map((node) => {\n        containerNode.c(node);\n      });\n      this.c(containerNode);\n    }\n  }\n  toString() {\n    const hasChildren = Boolean(this.children.length);\n    let xmlText = `<${this.name}`;\n    const attributes = this.attributes;\n    for (const attributeName of Object.keys(attributes)) {\n      const attribute = attributes[attributeName];\n      if (attribute != null) {\n        xmlText += ` ${attributeName}=\"${escapeAttribute(\"\" + attribute)}\"`;\n      }\n    }\n    return xmlText += !hasChildren ? \"/>\" : `>${this.children.map((c) => c.toString()).join(\"\")}</${this.name}>`;\n  }\n};\n__name(_XmlNode, \"XmlNode\");\nvar XmlNode = _XmlNode;\n// Annotate the CommonJS export names for ESM import in node:\n\n0 && (0);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../../../node_modules/.pnpm/@aws-sdk+xml-builder@3.709.0/node_modules/@aws-sdk/xml-builder/dist-cjs/index.js\n");

/***/ })

};
;